{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`TTbarResCoffea` Notebook to perform the data-driven mistag-rate-based ttbar hadronic analysis. \n",
    "This module must be run twice: \n",
    "   1. Make the mistag rate in the \"anti-tag and probe\" selection \n",
    "and the expectation in the signal region from MC,\n",
    "   1. Applies that mistag rate and the mod-mass procedure to the single-tag selection. \n",
    "\n",
    "These are all done in bins of\n",
    "b-tag categories (0, 1, $\\ge 2$) and rapidity ($|y| \\le 1.0$, $|y| > 1.0$).\n",
    "The signal region is two top-tagged jets. \n",
    "The background estimate is the single-tag selection weighted by the mistag rate from the\n",
    "\"anti-tag and probe\" region, with the mass of the weighted jet set to a random\n",
    "value from QCD MC in the 1-ttag region. \n",
    "\n",
    "\n",
    "The preselection is:\n",
    "- AK4-based $H_{T} > 1100$ GeV (to be on the trigger plateau). \n",
    "- $\\ge 2$ AK8 jets with AK8 $p_{T} > 400$ GeV and $|y| < 2.5$, loose jet ID applied from matched AK4 jets\n",
    "\n",
    "The 1-tag selection adds:\n",
    "- $\\ge 1$ AK8 jet with top tagging applied to randomly-assigned tag jet. \n",
    "\n",
    "\n",
    "The anti-tag selection is disjoint from the 1-tag selection:\n",
    "- $\\ge 1$ AK8 jet with top tagging VETO applied to randomly-assigned tag jet. \n",
    "\n",
    "\n",
    "The 2-tag selection is:\n",
    "- $\\ge 2$ AK8 jets with top tagging applied to both leading jets. \n",
    "\n",
    "\n",
    "The ttbar candidate mass assumes the two leading top-tagged jets are the top quarks. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "\n",
    "from coffea import hist\n",
    "from coffea.analysis_objects import JaggedCandidateArray\n",
    "import coffea.processor as processor\n",
    "from coffea import util\n",
    "from awkward import JaggedArray\n",
    "import numpy as np\n",
    "import glob as glob\n",
    "import itertools\n",
    "import pandas as pd\n",
    "from numpy.random import RandomState"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "xrootdstr1 = 'root://cmseos.fnal.gov//'\n",
    "xrootdstr2 = 'root://cmsxrootd.fnal.gov//'\n",
    "xrootdstr3 = 'root://cmsxrootd-site.fnal.gov/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "qcdfilename = 'QCD.txt'\n",
    "with open(qcdfilename) as f:\n",
    "    qcdfiles = [xrootdstr2 + s.strip() for s in f.readlines()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ttbarfilename = 'TTJets_TuneCP5_13TeV-amcatnloFXFX-pythia8.txt'\n",
    "with open(ttbarfilename) as f:\n",
    "    ttbarfiles = [xrootdstr2 + s.strip() for s in f.readlines()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "jetdatafilename = 'JetHT_Data.txt'\n",
    "with open(jetdatafilename) as f:\n",
    "    jetdatafiles = [xrootdstr2 + s.strip() for s in f.readlines()[::3]] # Every third datafile\n",
    "with open(jetdatafilename) as g:\n",
    "    jetdatafiles2016 = [xrootdstr2 + s.strip() for s in g.readlines() if \"/store/data/Run2016\" in s]\n",
    "with open(jetdatafilename) as h:\n",
    "    jetdatafiles2017 = [xrootdstr2 + s.strip() for s in h.readlines() if \"/store/data/Run2017\" in s]\n",
    "with open(jetdatafilename) as i:\n",
    "    jetdatafiles2018 = [xrootdstr2 + s.strip() for s in i.readlines() if \"/store/data/Run2018\" in s]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "filesets = {\n",
    "    'QCD':qcdfiles,\n",
    "    #'TTbar':ttbarfiles,\n",
    "    #'JetHT':jetdatafiles\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
=======
   "execution_count": 7,
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "from columnservice.client import ColumnClient\n",
    "cc = ColumnClient(\"coffea-dask.fnal.gov\")\n",
    "client = cc.get_dask()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
=======
   "execution_count": 8,
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "metadata": {},
   "outputs": [],
   "source": [
    "manual_bins = []\n",
    "ix = 400\n",
    "while ix <= 7000:\n",
    "    manual_bins.append(ix)\n",
    "    if ix < 1000:\n",
    "        ix += 50\n",
    "    elif ix < 2000:\n",
    "        ix += 100\n",
    "    elif ix < 4000:\n",
    "        ix += 500\n",
    "    elif ix < 5000:\n",
    "        ix += 1000\n",
    "    else:\n",
    "        ix += 2000\n",
    "print(manual_bins)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\"\"\"@TTbarResAnaHadronic Package to perform the data-driven mistag-rate-based ttbar hadronic analysis. \n",
    "\"\"\"\n",
    "class TTbarResProcessor(processor.ProcessorABC):\n",
    "    def __init__(self, prng, htCut=950., minMSD=105., maxMSD=210., tau32Cut=0.65, ak8PtMin=400., bdisc=0.7,\n",
    "                writePredDist=True,isData=True,year=2019, UseLookUpTables=False,\n",
    "                lu = None):\n",
    "        \n",
    "        self.prng = prng\n",
    "        self.htCut = htCut\n",
    "        self.minMSD = minMSD\n",
    "        self.maxMSD = maxMSD\n",
    "        self.tau32Cut = tau32Cut\n",
    "        self.ak8PtMin = ak8PtMin\n",
    "        self.bdisc = bdisc\n",
    "        self.writePredDist = writePredDist\n",
    "        self.writeHistFile = True\n",
    "        self.isData = isData\n",
    "        self.year=year\n",
    "        self.UseLookUpTables = UseLookUpTables\n",
    "        self.lu = lu # Look Up Tables\n",
    "        \n",
    "        self.ttagcats = [\"At\",\"at\", \"0t\", \"1t\", \"2t\"] #anti-tag+probe, anti-tag, 0, 1, >=2 ttags\n",
    "        self.btagcats = [\"0b\", \"1b\", \"2b\"]   # 0, 1, >=2 btags\n",
    "        self.ycats = ['cen', 'fwd']          # Central and forward\n",
    "        # Combine categories like \"0bcen\", \"0bfwd\", etc:\n",
    "        self.anacats = [ t+b+y for t,b,y in itertools.product( self.ttagcats, self.btagcats, self.ycats) ]\n",
    "        print(self.anacats)\n",
    "        \n",
    "        dataset_axis = hist.Cat(\"dataset\", \"Primary dataset\")\n",
    "        cats_axis = hist.Cat(\"anacat\", \"Analysis Category\")\n",
    "        \n",
    "        jetmass_axis = hist.Bin(\"jetmass\", r\"Jet $m$ [GeV]\", 50, 0, 500)\n",
    "        jetpt_axis = hist.Bin(\"jetpt\", r\"Jet $p_{T}$ [GeV]\", 50, 0, 5000)\n",
    "        ttbarmass_axis = hist.Bin(\"ttbarmass\", r\"$m_{t\\bar{t}}$ [GeV]\", 50, 0, 5000)\n",
    "        jeteta_axis = hist.Bin(\"jeteta\", r\"Jet $\\eta$\", 50, -5, 5)\n",
    "        jetphi_axis = hist.Bin(\"jetphi\", r\"Jet $\\phi$\", 50, -np.pi, np.pi)\n",
    "        jety_axis = hist.Bin(\"jety\", r\"Jet $y$\", 50, -3, 3)\n",
    "        jetdy_axis = hist.Bin(\"jetdy\", r\"Jet $\\Delta y$\", 50, 0, 3)\n",
    "        #jetp_axis = hist.Bin(\"jetp\", r\"Jet $p$ [GeV]\", 100, 0, 10000)\n",
    "        manual_axis = hist.Bin(\"jetp\", r\"Jet Momentum [GeV]\", manual_bins)\n",
    "        \n",
    "        subjetmass_axis = hist.Bin(\"subjetmass\", r\"SubJet $m$ [GeV]\", 50, 0, 500)\n",
    "        subjetpt_axis = hist.Bin(\"subjetpt\", r\"SubJet $p_{T}$ [GeV]\", 50, 0, 2000)\n",
    "        subjeteta_axis = hist.Bin(\"subjeteta\", r\"SubJet $\\eta$\", 50, -4, 4)\n",
    "        subjetphi_axis = hist.Bin(\"subjetphi\", r\"SubJet $\\phi$\", 50, -np.pi, np.pi)\n",
    "\n",
    "        self._accumulator = processor.dict_accumulator({\n",
    "            'ttbarmass': hist.Hist(\"Counts\", dataset_axis, cats_axis, ttbarmass_axis),\n",
    "            'jetmass':   hist.Hist(\"Counts\", dataset_axis, cats_axis, jetmass_axis),\n",
    "            'jetpt':     hist.Hist(\"Counts\", dataset_axis, cats_axis, jetpt_axis),\n",
    "            'jeteta':    hist.Hist(\"Counts\", dataset_axis, cats_axis, jeteta_axis),\n",
<<<<<<< HEAD
    "            'probept':     hist.Hist(\"Counts\", dataset_axis, cats_axis, jetpt_axis),\n",
<<<<<<< HEAD
    "            'probep':     hist.Hist(\"Counts\", dataset_axis, cats_axis, jetp_axis),\n",
=======
    "            'probept':   hist.Hist(\"Counts\", dataset_axis, cats_axis, jetpt_axis),\n",
    "            'probep':    hist.Hist(\"Counts\", dataset_axis, cats_axis, jetp_axis),\n",
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
=======
    "            'probep':     hist.Hist(\"Counts\", dataset_axis, cats_axis, manual_axis),\n",
>>>>>>> backup
    "\n",
    "            'jetphi':    hist.Hist(\"Counts\", dataset_axis, cats_axis, jetphi_axis),\n",
    "            'jety':      hist.Hist(\"Counts\", dataset_axis, cats_axis, jety_axis),\n",
    "            'jetdy':     hist.Hist(\"Counts\", dataset_axis, cats_axis, jetdy_axis),\n",
    "            \n",
    "            'subjetmass':   hist.Hist(\"Counts\", dataset_axis, cats_axis, subjetmass_axis),\n",
    "            'subjetpt':     hist.Hist(\"Counts\", dataset_axis, cats_axis, subjetpt_axis),\n",
    "            'subjeteta':    hist.Hist(\"Counts\", dataset_axis, cats_axis, subjeteta_axis),\n",
    "            'subjetphi':    hist.Hist(\"Counts\", dataset_axis, cats_axis, subjetphi_axis),\n",
    "            \n",
    "            'numerator': hist.Hist(\"Counts\", dataset_axis, cats_axis, manual_axis),\n",
    "            'denominator': hist.Hist(\"Counts\", dataset_axis, cats_axis, manual_axis),\n",
    "            'cutflow': processor.defaultdict_accumulator(int),\n",
    "            \n",
    "        })\n",
    "\n",
    "            \n",
    "    @property\n",
    "    def accumulator(self):\n",
    "        return self._accumulator\n",
    "\n",
    "    def process(self, df):\n",
    "        \n",
    "        output = self.accumulator.identity()\n",
    "        #dataset = events.metadata['dataset']\n",
    "        \n",
    "        # ---- Define dataset ---- #\n",
    "        dataset = df['dataset'] #coffea.processor.LazyDataFrame\n",
    "        Dataset_info = df.available #list of available columns in LazyDataFrame object (Similar to 'Events->Show()' command in ROOT)\n",
    "        \n",
    "        # ---- Get triggers from Dataset_info ---- #\n",
    "        triggers = [itrig for itrig in Dataset_info if 'HLT_PFHT' in itrig]\n",
    "        AK8triggers = [itrig for itrig in Dataset_info if 'HLT_AK8PFHT' in itrig]\n",
    "\n",
    "        # ---- Find numeric values in trigger strings ---- #\n",
    "        triggers_cut1 = [sub.split('PFHT')[1] for sub in triggers] # Remove string characters from left of number\n",
    "        triggers_cut2 = [sub.split('_')[0] for sub in triggers_cut1] # Remove string characters from right of number\n",
    "        isTriggerValue = [val.isnumeric() for val in triggers_cut2] # Boolean -> if string is only a number\n",
    "        triggers_cut2 = np.where(isTriggerValue, triggers_cut2, 0) # If string is not a number, replace with 0\n",
    "        triggers_vals = [int(val) for val in triggers_cut2] # Convert string numbers to integers\n",
    "        \n",
    "        AK8triggers_cut1 = [sub.split('HT')[1] for sub in AK8triggers]\n",
    "        AK8triggers_cut2 = [sub.split('_')[0] for sub in AK8triggers_cut1]\n",
    "        isAK8TriggerValue = [val.isnumeric() for val in AK8triggers_cut2]\n",
    "        AK8triggers_cut2 = np.where(isAK8TriggerValue, AK8triggers_cut2, 0)\n",
    "        AK8triggers_vals = [int(val) for val in AK8triggers_cut2]\n",
    "        \n",
    "        # ---- Find Largest and Second Largest Value ---- #\n",
    "        triggers_vals.sort(reverse = True)\n",
    "        AK8triggers_vals.sort(reverse = True)\n",
    "        \n",
    "        triggers_vals1 = str(triggers_vals[0])\n",
    "        triggers_vals2 = str(triggers_vals[1])\n",
    "        AK8triggers_vals1 = str(AK8triggers_vals[0])\n",
    "        AK8triggers_vals2 = str(AK8triggers_vals[1])\n",
    "        \n",
    "        # ---- Define strings for the selected triggers ---- #\n",
    "        HLT_trig1_str = [itrig for itrig in triggers if (triggers_vals1) in itrig][0]\n",
    "        HLT_trig2_str = [itrig for itrig in triggers if (triggers_vals2) in itrig][0]\n",
    "        HLT_AK8_trig1_str = [itrig for itrig in AK8triggers if (AK8triggers_vals1) in itrig][0]\n",
    "        HLT_AK8_trig2_str = [itrig for itrig in AK8triggers if (AK8triggers_vals2) in itrig][0]\n",
    "        \n",
    "        # ---- Define HLT triggers to be used ---- #\n",
    "        HLT_trig1 = df[HLT_trig1_str]\n",
    "        HLT_trig2 = df[HLT_trig2_str]\n",
    "        HLT_AK8_trig1 = df[HLT_AK8_trig1_str]\n",
    "        HLT_AK8_trig2 = df[HLT_AK8_trig2_str]\n",
    "       \n",
    "        \n",
    "        # ---- Define AK8 Jets as FatJets ---- #\n",
    "        FatJets = JaggedCandidateArray.candidatesfromcounts(\n",
    "            df['nFatJet'],\n",
    "            pt=df['FatJet_pt'],\n",
    "            eta=df['FatJet_eta'],\n",
    "            phi=df['FatJet_phi'],\n",
    "            mass=df['FatJet_mass'],\n",
    "            area=df['FatJet_area'],\n",
    "            msoftdrop=df['FatJet_msoftdrop'],\n",
    "            jetId=df['FatJet_jetId'],\n",
    "            tau1=df['FatJet_tau1'],\n",
    "            tau2=df['FatJet_tau2'],\n",
    "            tau3=df['FatJet_tau3'],\n",
    "            tau4=df['FatJet_tau4'],\n",
    "            n3b1=df['FatJet_n3b1'],\n",
    "            btagDeepB=df['FatJet_btagDeepB'],\n",
    "            btagCSVV2=df['FatJet_btagCSVV2'],\n",
    "            deepTag_TvsQCD=df['FatJet_deepTag_TvsQCD'],\n",
    "            deepTagMD_TvsQCD=df['FatJet_deepTagMD_TvsQCD'],\n",
    "            subJetIdx1=df['FatJet_subJetIdx1'],\n",
    "            subJetIdx2=df['FatJet_subJetIdx2']\n",
    "            )\n",
    "        \n",
    "        # ---- Define AK4 jets as Jets ---- #\n",
    "        Jets = JaggedCandidateArray.candidatesfromcounts(\n",
    "            df['nJet'],\n",
    "            pt=df['Jet_pt'],\n",
    "            eta=df['Jet_eta'],\n",
    "            phi=df['Jet_phi'],\n",
    "            mass=df['Jet_mass'],\n",
    "            area=df['Jet_area']\n",
    "            )\n",
    "        # ---- Define SubJets ---- #\n",
    "        SubJets = JaggedCandidateArray.candidatesfromcounts(\n",
    "            df['nSubJet'],\n",
    "            pt=df['SubJet_pt'],\n",
    "            eta=df['SubJet_eta'],\n",
    "            phi=df['SubJet_phi'],\n",
    "            mass=df['SubJet_mass'],\n",
    "            btagDeepB=df['SubJet_btagDeepB'],\n",
    "            btagCSVV2=df['SubJet_btagCSVV2']\n",
    "            )\n",
    "        \n",
    "        \n",
    "        # ---- Get event weights from dataset ---- #\n",
    "        if 'JetHT' in dataset: # If data is used...\n",
    "            evtweights = np.ones(FatJets.size) # set all \"data weights\" to one\n",
    "        else: # if Monte Carlo dataset is used...\n",
    "            evtweights = df[\"Generator_weight\"].reshape(-1, 1).flatten()\n",
    "        \n",
    "        # ---- Show all events ---- #\n",
    "        output['cutflow']['all events'] += FatJets.size\n",
    "        \n",
    "        # ---- Apply Triggers ---- #\n",
    "        FatJets = FatJets[HLT_AK8_trig1]\n",
    "        evtweights = evtweights[HLT_AK8_trig1]\n",
    "        Jets = Jets[HLT_AK8_trig1]\n",
    "        SubJets = SubJets[HLT_AK8_trig1]\n",
    "    \n",
    "        # ---- Jets that satisfy Jet ID ---- #\n",
    "        jet_id = (FatJets.jetId > 0)\n",
    "        FatJets = FatJets[jet_id]\n",
    "        output['cutflow']['jet id'] += jet_id.any().sum()\n",
    "        \n",
    "        # ---- Apply Eta cut ---- #\n",
    "        jetkincut_index = (FatJets.pt > self.ak8PtMin) & (np.abs(FatJets.eta) < 2.5) # eta cut here\n",
    "        FatJets = FatJets[ jetkincut_index ]\n",
    "        output['cutflow']['jet kin'] += jetkincut_index.any().sum()\n",
    "        \n",
    "        # ---- Ensure that FatJets are AK8 Jets ---- #\n",
    "        #ak8Jets = FatJets.area > np.pi*0.8**2\n",
    "        #FatJets = FatJets[ak8Jets]\n",
    "        \n",
    "        # ---- Find at least two AK8 Jets ---- #\n",
    "        twoFatJetsKin = (FatJets.counts >= 2)\n",
    "        FatJets = FatJets[twoFatJetsKin]\n",
    "        evtweights = evtweights[twoFatJetsKin]\n",
    "        Jets = Jets[twoFatJetsKin]\n",
    "        SubJets = SubJets[twoFatJetsKin]\n",
    "        output['cutflow']['two FatJets and jet kin'] += twoFatJetsKin.sum()\n",
    "        \n",
    "        # ---- Apply HT Cut ---- #\n",
    "        #ak4Jets = Jets.area > np.pi*0.4**2\n",
    "        #Jets = Jets[ak4Jets]\n",
    "        hT = Jets.pt.sum()\n",
    "        passhT = (hT > self.htCut)\n",
    "        evtweights = evtweights[passhT]\n",
    "        FatJets = FatJets[passhT]\n",
    "        SubJets = SubJets[passhT]\n",
    "        \n",
    "        # ---- Randomly Select AK8 Jet as TTbar Candidate --- #\n",
    "        highPhi = FatJets.phi[:,0] > FatJets.phi[:,1]\n",
    "        highRandIndex = np.where(highPhi, 0, 1)\n",
    "        #index = JaggedArray.fromcounts(np.ones(len(FatJets), dtype='i'), prng.randint(2, size=len(FatJets)))\n",
    "        index = JaggedArray.fromcounts(np.ones(len(FatJets), dtype='i'), highRandIndex )\n",
    "        jet0 = FatJets[index]\n",
    "        jet1 = FatJets[1 - index]\n",
    "        \n",
    "        ttbarcands = jet0.cross(jet1) #FatJets[:,0:2].distincts()\n",
    "        \n",
    "        # ---- Look for at least 1 TTbar candidate pair and re-broadcast releveant arrays  ---- #\n",
    "        oneTTbar = (ttbarcands.counts >= 1)\n",
    "        output['cutflow']['>= one oneTTbar'] += oneTTbar.sum()\n",
    "        ttbarcands = ttbarcands[oneTTbar]\n",
    "        evtweights = evtweights[oneTTbar]\n",
    "        FatJets = FatJets[oneTTbar]\n",
    "        SubJets = SubJets[oneTTbar]\n",
    "         \n",
    "        # ---- Apply Delta Phi Cut for Back to Back Topology ---- #\n",
    "        dPhiCut = (ttbarcands.i0.p4.delta_phi(ttbarcands.i1.p4) > 2.1).flatten()\n",
    "        output['cutflow']['dPhi > 2.1'] += dPhiCut.sum()\n",
    "        ttbarcands = ttbarcands[dPhiCut]\n",
    "        evtweights = evtweights[dPhiCut]\n",
    "        FatJets = FatJets[dPhiCut] \n",
    "        SubJets = SubJets[dPhiCut] \n",
    "        \n",
    "\n",
    "        #btag_i0 = (ttbarcands.i0.btagCSVV2 > self.bdisc)\n",
    "        #btag_i1 = (ttbarcands.i1.btagCSVV2 > self.bdisc)\n",
    "        \n",
    "        #print(\"FatJets = \", ttbarcands)\n",
    "        #print(\"SubJets = \", SubJets)\n",
    "        #print(\"\\n\")\n",
    "        #print(ttbarcands.i0.subJetIdx1)\n",
    "        #print(ttbarcands.i0.subJetIdx2)\n",
    "        #print(ttbarcands.i1.subJetIdx1)\n",
    "        #print(ttbarcands.i1.subJetIdx2)\n",
    "        #print(\"\\n\")\n",
    "        \n",
    "        hasSubjets0 = ((ttbarcands.i0.subJetIdx1 > -1) & (ttbarcands.i0.subJetIdx2 > -1))\n",
    "        hasSubjets1 = ((ttbarcands.i1.subJetIdx1 > -1) & (ttbarcands.i1.subJetIdx2 > -1))\n",
    "        GoodSubjets = ((hasSubjets0) & (hasSubjets1)).flatten()\n",
    "        \n",
    "        #print(hasSubjets0.shape)\n",
    "        #print(hasSubjets1.shape)\n",
    "        #print(ttbarcands.counts)\n",
    "        #print(SubJets.counts)\n",
    "        \n",
    "        ttbarcands = ttbarcands[GoodSubjets] \n",
    "        SubJets = SubJets[GoodSubjets]\n",
    "        evtweights = evtweights[GoodSubjets]\n",
    "       \n",
    "        SubJet01 = SubJets[ttbarcands.i0.subJetIdx1] # FatJet i0 with subjet 1\n",
    "        SubJet02 = SubJets[ttbarcands.i0.subJetIdx2] # FatJet i0 with subjet 2\n",
    "        SubJet11 = SubJets[ttbarcands.i1.subJetIdx1] # FatJet i1 with subjet 1\n",
    "        SubJet12 = SubJets[ttbarcands.i1.subJetIdx2] # FatJet i1 with subjet 2\n",
    "        \n",
    "        #print(\"Selected SubJet 1 = \", SubJet01)\n",
    "        #print(\"Selected SubJet 2 = \", SubJet02)\n",
    "        #print(\"Selected SubJet 3 = \", SubJet11)\n",
    "        #print(\"Selected SubJet 4 = \", SubJet12)\n",
    "        #print(\"\\n\")\n",
    "        \n",
    "        # ---- Get Analysis Categories ---- # \n",
    "        # ---- They are (central, forward)   cross   (0b,1b,>=2b) ---- #\n",
    "        cen = np.abs(ttbarcands.i0.p4.rapidity - ttbarcands.i1.p4.rapidity) < 1.0\n",
    "        fwd = (~cen)\n",
    "        tau32_i0 = np.where(ttbarcands.i0.tau2>0,ttbarcands.i0.tau3/ttbarcands.i0.tau2, 0 )\n",
    "        tau32_i1 = np.where(ttbarcands.i1.tau2>0,ttbarcands.i1.tau3/ttbarcands.i1.tau2, 0 )\n",
    "        taucut_i0 = tau32_i0 < self.tau32Cut\n",
    "        taucut_i1 = tau32_i1 < self.tau32Cut\n",
    "        mcut_i0 = (self.minMSD < ttbarcands.i0.msoftdrop) & (ttbarcands.i0.msoftdrop < self.maxMSD) \n",
    "        mcut_i1 = (self.minMSD < ttbarcands.i1.msoftdrop) & (ttbarcands.i1.msoftdrop < self.maxMSD) \n",
    "\n",
    "        ttag_i0 = (taucut_i0) & (mcut_i0)\n",
    "        ttag_i1 = (taucut_i1) & (mcut_i1)\n",
    "        antitag = (~taucut_i0) & (mcut_i0) #Probe will always be ttbarcands.i1\n",
    "        \n",
    "        ttag0 = (~ttag_i0) & (~ttag_i1)\n",
    "        ttag1 = ttag_i0 ^ ttag_i1\n",
    "        ttag2 = ttag_i0 & ttag_i1\n",
    "        \n",
    "        btag_i0 = ( np.maximum(SubJet01.btagCSVV2 , SubJet02.btagCSVV2) > self.bdisc )\n",
    "        btag_i1 = ( np.maximum(SubJet11.btagCSVV2 , SubJet12.btagCSVV2) > self.bdisc )\n",
    "\n",
    "        btag0 = (~btag_i0) & (~btag_i1)\n",
    "        btag1 = btag_i0 ^ btag_i1\n",
    "        btag2 = btag_i0 & btag_i1\n",
    "        \n",
    "        antitag_probe = np.logical_and(antitag, ttag_i1) #Found an antitag and ttagged probe pair for mistag rate\n",
    "        \n",
    "        regs = [cen,fwd]\n",
    "        btags = [btag0,btag1,btag2]\n",
    "        ttags = [antitag_probe,antitag,ttag0,ttag1,ttag2]\n",
    "        cats = [ (t&b&y).flatten() for t,b,y in itertools.product( ttags, btags, regs) ]\n",
    "        labels_and_categories = dict(zip( self.anacats, cats ))\n",
    "        \n",
    "        ttbarmass = ttbarcands.p4.sum().mass.flatten()\n",
    "        jetpt = ttbarcands.pt.flatten()\n",
    "        jeteta = ttbarcands.eta.flatten()\n",
    "        jetphi = ttbarcands.phi.flatten()\n",
    "        jety = ttbarcands.p4.rapidity.flatten()\n",
    "        jetdy = np.abs(ttbarcands.i0.p4.rapidity.flatten() - ttbarcands.i1.p4.rapidity.flatten())\n",
    "        \n",
    "        #print(\"jetpt both = \", ttbarcands.pt.flatten())\n",
    "        #print(\"jetpt control = \", ttbarcands.i0.pt.flatten())\n",
    "        #print(\"jetpt probe = \", ttbarcands.i1.pt.flatten())\n",
    "        #print()\n",
    "        \n",
    "        weights = evtweights.flatten()\n",
    "        #weights[weights < 0] = 0\n",
    "        \n",
    "        # ---- Define the SumW2 for MC Datasets ---- #\n",
    "        output['cutflow']['sumw'] += np.sum(weights)\n",
    "        output['cutflow']['sumw2'] += np.sum(weights**2)\n",
    "        # ---- Define Momentum p of probe jet as the Mistag Rate variable; M(p) ---- #\n",
    "        # ---- Transverse Momentum pT can also be used instead; M(pT) ---- #\n",
    "        pT = ttbarcands.i1.pt.flatten()\n",
    "        eta = ttbarcands.i1.eta.flatten()\n",
    "        pz = ttbarcands.i1.p4.z.flatten()\n",
    "        p = ttbarcands.i1.p4.p.flatten()\n",
    "        #p = np.absolute(np.sqrt(pT**2 + pz**2))\n",
    "        \n",
    "        # ---- Define the Numerator and Denominator for Mistag Rate ---- #\n",
    "        numerator = np.where(antitag_probe, p, -1) # If no antitag and tagged probe, move event to useless bin\n",
    "        denominator = np.where(antitag, p, -1) # If no antitag, move event to useless bin\n",
    "        \n",
    "        df = pd.DataFrame({\"momentum\":p}) # Used for finding values in LookUp Tables\n",
    "        \n",
    "        for ilabel,icat in labels_and_categories.items():\n",
    "            ### ------------------------------------ Mistag Scaling ------------------------------------ ###\n",
    "            if self.UseLookUpTables == True:\n",
    "                file_df = self.lu[dataset]['at' + str(ilabel[2:])] # get mistag (lookup) filename for 'at'\n",
    "                bin_widths = file_df['p'].values # collect bins as written in .csv file\n",
    "                mtr = file_df['M(p)'].values # collect mistag rate as function of p as written in file\n",
    "                wgts = mtr # Define weights based on mistag rates\n",
    "                \n",
    "                BinKeys = np.arange(bin_widths.size) # Use as label for BinNumber column in the new dataframe\n",
    "                #print('\\n bin_widths = \\n', bin_widths)\n",
    "                #print('\\n p = \\n', p)\n",
    "                #print('\\n BinKeys = \\n', BinKeys)\n",
    "                \n",
    "                #Bins = pd.interval_range(start=0, periods=100, freq=100, closed='left') # Recreate the momentum bins from file_df as something readable for pd.cut()\n",
    "                Bins = np.array(manual_bins)\n",
    "                #print('\\n bin_widths -> Readable Bins = \\n', Bins)\n",
    "                \n",
    "                #P = np.where(p>5000., 5000., p) # Avoids momentum larger than the allowed bin size; caps the momentum\n",
    "                \n",
    "                df['BinWidth'] = pd.cut(p, bins=Bins) # new dataframe column\n",
    "                df['BinNumber'] = pd.cut(p, bins=Bins, labels=BinKeys)\n",
    "                #df['BinNumber'] = pd.cut(p, bins=Bins).map(dict(zip(Bins,BinKeys))) # new dataframe column\n",
    "                \n",
    "                BinNumber = df['BinNumber'].values # Collect the Bin Numbers into a numpy array\n",
    "                #print('\\n Bin Number = \\n', BinNumber)\n",
    "                BinNumber = BinNumber.astype('int64') # Insures the bin numbers are integers\n",
    "            \n",
    "                WeightMatching = wgts[BinNumber] # Match 'wgts' with corresponding p bin using the bin number\n",
    "                Weights = weights*WeightMatching # Include 'wgts' with the previously defined 'weights'\n",
    "            else:\n",
    "                Weights = weights # No mistag rates, no change to weights\n",
    "            ###---------------------------------------------------------------------------------------------###\n",
    "            output['cutflow'][ilabel] += np.sum(icat)\n",
    "          \n",
    "            output['ttbarmass'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                ttbarmass=ttbarmass[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['jetpt'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jetpt=jetpt[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['probept'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jetpt=pT[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['probep'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jetp=p[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['jeteta'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jeteta=jeteta[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['jetphi'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jetphi=jetphi[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['jety'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jety=jety[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['jetdy'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jetdy=jetdy[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['numerator'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jetp=numerator[icat],\n",
    "                                weight=Weights[icat])\n",
    "            output['denominator'].fill(dataset=dataset, anacat=ilabel, \n",
    "                                jetp=denominator[icat],\n",
    "                                weight=Weights[icat])\n",
    "        \n",
    "        return output\n",
    "\n",
    "    def postprocess(self, accumulator):\n",
    "        return accumulator"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filesets = {\n",
    "    #'QCD':qcdfiles,\n",
    "    #'TTbar':ttbarfiles\n",
    "    'JetHT':jetdatafiles,\n",
    "    'JetHT2016_Data':jetdatafiles2016,\n",
    "    'JetHT2017_Data':jetdatafiles2017,\n",
    "    'JetHT2018_Data':jetdatafiles2018\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
=======
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QCD\n",
      "['At0bcen', 'At0bfwd', 'At1bcen', 'At1bfwd', 'At2bcen', 'At2bfwd', 'at0bcen', 'at0bfwd', 'at1bcen', 'at1bfwd', 'at2bcen', 'at2bfwd', '0t0bcen', '0t0bfwd', '0t1bcen', '0t1bfwd', '0t2bcen', '0t2bfwd', '1t0bcen', '1t0bfwd', '1t1bcen', '1t1bfwd', '1t2bcen', '1t2bfwd', '2t0bcen', '2t0bfwd', '2t1bcen', '2t1bfwd', '2t2bcen', '2t2bfwd']\n",
      "{'ttbarmass': <Hist (dataset,anacat,ttbarmass) instance at 0x7fb369cf7110>, 'jetmass': <Hist (dataset,anacat,jetmass) instance at 0x7fb369495fd0>, 'jetpt': <Hist (dataset,anacat,jetpt) instance at 0x7fb369495f90>, 'jeteta': <Hist (dataset,anacat,jeteta) instance at 0x7fb369495f10>, 'probept': <Hist (dataset,anacat,jetpt) instance at 0x7fb369495f50>, 'probep': <Hist (dataset,anacat,jetp) instance at 0x7fb36b2ce950>, 'jetphi': <Hist (dataset,anacat,jetphi) instance at 0x7fb36b2ce410>, 'jety': <Hist (dataset,anacat,jety) instance at 0x7fb36b74cf90>, 'jetdy': <Hist (dataset,anacat,jetdy) instance at 0x7fb36bc70490>, 'subjetmass': <Hist (dataset,anacat,subjetmass) instance at 0x7fb36bc70d50>, 'subjetpt': <Hist (dataset,anacat,subjetpt) instance at 0x7fb369d10350>, 'subjeteta': <Hist (dataset,anacat,subjeteta) instance at 0x7fb369d10390>, 'subjetphi': <Hist (dataset,anacat,subjetphi) instance at 0x7fb369d10450>, 'numerator': <Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>, 'denominator': <Hist (dataset,anacat,jetp) instance at 0x7fb369d10410>, 'cutflow': defaultdict_accumulator(<class 'int'>, {'all events': 18455107, 'one FatJets': 730025, 'two FatJets': 707972, 'jet id': 707968, 'jet kin': 438639, 'two FatJets and jet kin': 343714, '>= one oneTTbar': 343714, 'dPhi > 2.1': 179192, 'sumw': 0.013068939791082812, 'sumw2': 2.998777319344892e-09, 'At0bcen': 362, 'At0bfwd': 325, 'At1bcen': 20, 'At1bfwd': 16, 'At2bcen': 0, 'At2bfwd': 0, 'at0bcen': 8473, 'at0bfwd': 7505, 'at1bcen': 319, 'at1bfwd': 254, 'at2bcen': 4, 'at2bfwd': 5, '0t0bcen': 83587, '0t0bfwd': 76795, '0t1bcen': 2126, '0t1bfwd': 1759, '0t2bcen': 18, '0t2bfwd': 11, '1t0bcen': 7512, '1t0bfwd': 6551, '1t1bcen': 276, '1t1bfwd': 252, '1t2bcen': 2, '1t2bfwd': 5, '2t0bcen': 149, '2t0bfwd': 134, '2t1bcen': 7, '2t1bfwd': 8, '2t2bcen': 0, '2t2bfwd': 0})}\n"
     ]
    }
   ],
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "source": [
    "tstart = time.time()\n",
    "\n",
    "outputs_unweighted = {}\n",
    "\n",
    "seed = 1234567890\n",
    "prng = RandomState(seed)\n",
    "\n",
    "for name,files in filesets.items(): \n",
    "    \n",
    "\n",
    "    print(name)\n",
    "    output = processor.run_uproot_job({name:files},\n",
    "                                      treename='Events',\n",
    "                                      processor_instance=TTbarResProcessor(UseLookUpTables=False,\n",
    "                                                                          prng=prng),\n",
    "                                      executor=processor.dask_executor,\n",
    "                                      #executor=processor.iterative_executor,\n",
    "                                      #executor=processor.futures_executor,\n",
    "                                      executor_args={\n",
    "                                          'client': client, \n",
    "                                          'nano':False, \n",
    "                                          'flatten':True, \n",
    "                                          'skipbadfiles':False,\n",
    "                                          'workers': 2},\n",
    "                                      chunksize=100000, maxchunks=600\n",
    "                                     )\n",
    "\n",
    "    elapsed = time.time() - tstart\n",
    "    outputs_unweighted[name] = output\n",
    "    print(output)\n",
    "    util.save(output, 'TTbarResCoffea_' + name + '_unweighted_output.coffea')"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {},
   "outputs": [],
=======
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Elapsed time =  105.61271929740906  sec.\n",
      "Elapsed time =  1.760211988290151  min.\n",
      "Elapsed time =  0.029336866471502517  hrs.\n"
     ]
    }
   ],
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "source": [
    "print('Elapsed time = ', elapsed, ' sec.')\n",
    "print('Elapsed time = ', elapsed/60., ' min.')\n",
    "print('Elapsed time = ', elapsed/3600., ' hrs.') "
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {},
   "outputs": [],
=======
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------Unweighted QCD--------\n",
      "          all events :     18455107\n",
      "         one FatJets :       730025\n",
      "         two FatJets :       707972\n",
      "              jet id :       707968\n",
      "             jet kin :       438639\n",
      "two FatJets and jet kin :       343714\n",
      "     >= one oneTTbar :       343714\n",
      "          dPhi > 2.1 :       179192\n",
      "                sumw :            0\n",
      "               sumw2 :            0\n",
      "             At0bcen :          362\n",
      "             At0bfwd :          325\n",
      "             At1bcen :           20\n",
      "             At1bfwd :           16\n",
      "             At2bcen :            0\n",
      "             At2bfwd :            0\n",
      "             at0bcen :         8473\n",
      "             at0bfwd :         7505\n",
      "             at1bcen :          319\n",
      "             at1bfwd :          254\n",
      "             at2bcen :            4\n",
      "             at2bfwd :            5\n",
      "             0t0bcen :        83587\n",
      "             0t0bfwd :        76795\n",
      "             0t1bcen :         2126\n",
      "             0t1bfwd :         1759\n",
      "             0t2bcen :           18\n",
      "             0t2bfwd :           11\n",
      "             1t0bcen :         7512\n",
      "             1t0bfwd :         6551\n",
      "             1t1bcen :          276\n",
      "             1t1bfwd :          252\n",
      "             1t2bcen :            2\n",
      "             1t2bfwd :            5\n",
      "             2t0bcen :          149\n",
      "             2t0bfwd :          134\n",
      "             2t1bcen :            7\n",
      "             2t1bfwd :            8\n",
      "             2t2bcen :            0\n",
      "             2t2bfwd :            0\n"
     ]
    }
   ],
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "source": [
    "for name,output in outputs_unweighted.items(): \n",
    "    print(\"-------Unweighted \" + name + \"--------\")\n",
    "    for i,j in output['cutflow'].items():        \n",
    "        print( '%20s : %12d' % (i,j) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
=======
   "execution_count": 12,
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "metadata": {},
   "outputs": [],
   "source": [
    "def mkdir_p(mypath):\n",
    "    '''Creates a directory. equivalent to using mkdir -p on the command line'''\n",
    "\n",
    "    from errno import EEXIST\n",
    "    from os import makedirs,path\n",
    "\n",
    "    try:\n",
    "        makedirs(mypath)\n",
    "    except OSError as exc: # Python >2.5\n",
    "        if exc.errno == EEXIST and path.isdir(mypath):\n",
    "            pass\n",
    "        else: raise"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
=======
   "execution_count": 13,
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "metadata": {},
   "outputs": [],
   "source": [
    "def DoesDirectoryExist(mypath): #extra precaution (Probably overkill...)\n",
    "    '''Checks to see if Directory exists before running mkdir_p'''\n",
    "    import os.path\n",
    "    from os import path\n",
    "    \n",
    "    if path.exists(mypath):\n",
    "        pass\n",
    "    else:\n",
    "        mkdir_p(mypath)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
=======
   "execution_count": 14,
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "import re # regular expressions\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "# ---- Reiterate categories ---- #\n",
    "ttagcats = [\"at\", \"0t\", \"1t\", \"2t\"]\n",
    "btagcats = [\"0b\", \"1b\", \"2b\"]\n",
    "ycats = ['cen', 'fwd']\n",
    "\n",
    "list_of_cats = [ t+b+y for t,b,y in itertools.product( ttagcats, btagcats, ycats) ]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
=======
   "execution_count": 15,
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
=======
   "execution_count": 16,
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "metadata": {},
   "outputs": [],
   "source": [
    "maindirectory = os.getcwd() # changes accordingly"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
=======
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/work/TTbarAllHadUproot/MistagPlots/\n",
      "QCD\n",
      "at0bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb353c07210>\n",
      "<Hist (jetp) instance at 0x7fb353c07510>\n",
      "QCD\n",
      "at0bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b405ad0>\n",
      "<Hist (jetp) instance at 0x7fb34b405c10>\n",
      "QCD\n",
      "at1bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b362ed0>\n",
      "<Hist (jetp) instance at 0x7fb34b369190>\n",
      "QCD\n",
      "at1bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b3322d0>\n",
      "<Hist (jetp) instance at 0x7fb34b332410>\n",
      "QCD\n",
      "at2bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b28c550>\n",
      "<Hist (jetp) instance at 0x7fb34b28c690>\n",
      "QCD\n",
      "at2bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b256790>\n",
      "<Hist (jetp) instance at 0x7fb34b2568d0>\n",
      "QCD\n",
      "0t0bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b2259d0>\n",
      "<Hist (jetp) instance at 0x7fb34b225b10>\n",
      "QCD\n",
      "0t0bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b1eecd0>\n",
      "<Hist (jetp) instance at 0x7fb34b1eee10>\n",
      "QCD\n",
      "0t1bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b1bbf90>\n",
      "<Hist (jetp) instance at 0x7fb34b1bd090>\n",
      "QCD\n",
      "0t1bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b1891d0>\n",
      "<Hist (jetp) instance at 0x7fb34b189310>\n",
      "QCD\n",
      "0t2bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b0d6450>\n",
      "<Hist (jetp) instance at 0x7fb34b0d6590>\n",
      "QCD\n",
      "0t2bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b09f6d0>\n",
      "<Hist (jetp) instance at 0x7fb34b09f810>\n",
      "QCD\n",
      "1t0bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b06e950>\n",
      "<Hist (jetp) instance at 0x7fb34b06ea90>\n",
      "QCD\n",
      "1t0bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34b03ab90>\n",
      "<Hist (jetp) instance at 0x7fb34b03acd0>\n",
      "QCD\n",
      "1t1bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34af96f10>\n",
      "<Hist (jetp) instance at 0x7fb34af96b90>\n",
      "QCD\n",
      "1t1bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34af68f10>\n",
      "<Hist (jetp) instance at 0x7fb34af68b90>\n",
      "QCD\n",
      "1t2bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34af3e210>\n",
      "<Hist (jetp) instance at 0x7fb34af3e350>\n",
      "QCD\n",
      "1t2bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34af024d0>\n",
      "<Hist (jetp) instance at 0x7fb34af02610>\n",
      "QCD\n",
      "2t0bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34ae57510>\n",
      "<Hist (jetp) instance at 0x7fb34ae57650>\n",
      "QCD\n",
      "2t0bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34ae22950>\n",
      "<Hist (jetp) instance at 0x7fb34ae22a90>\n",
      "QCD\n",
      "2t1bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34adef0d0>\n",
      "<Hist (jetp) instance at 0x7fb34adebcd0>\n",
      "QCD\n",
      "2t1bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34adba9d0>\n",
      "<Hist (jetp) instance at 0x7fb34adba890>\n",
      "QCD\n",
      "2t2bcen\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34ad842d0>\n",
      "<Hist (jetp) instance at 0x7fb34ad841d0>\n",
      "QCD\n",
      "2t2bfwd\n",
      "<Hist (dataset,anacat,jetp) instance at 0x7fb369d107d0>\n",
      "<Hist (jetp) instance at 0x7fb34accda90>\n",
      "<Hist (jetp) instance at 0x7fb34accd950>\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "source": [
    "\"\"\" ---------------- CREATES MISTAG PLOTS ---------------- \"\"\"\n",
    "# ---- Only Use This Cell When LookUp Tables Are Not In Use (i.e. UseLookUpTables = False) ---- #\n",
    "\n",
    "SaveDirectory = maindirectory + '/MistagPlots/'\n",
    "DoesDirectoryExist(SaveDirectory) # no need to create the directory several times\n",
    "\n",
    "# Function sqrt(x)\n",
    "def forward(x):\n",
    "    return x**(1/2)\n",
    "\n",
    "\n",
    "def inverse(x):\n",
    "    return x**2\n",
    "\n",
    "print(SaveDirectory)\n",
    "for iset in filesets:\n",
    "    for icat in list_of_cats:\n",
    "        print(iset)\n",
    "        print(icat)\n",
    "        title = iset + ' mistag ' + icat\n",
    "        filename = 'mistag_' + iset + '_' + icat + '.' + 'png'\n",
    "        print(outputs_unweighted[iset]['numerator'])\n",
    "        Numerator = outputs_unweighted[iset]['numerator'].integrate('anacat', icat).integrate('dataset', iset)\n",
    "        Denominator = outputs_unweighted[iset]['denominator'].integrate('anacat', icat).integrate('dataset', iset)\n",
    "        print(Numerator)\n",
    "        print(Denominator)\n",
    "        mistag = hist.plotratio(num = Numerator, denom = Denominator,\n",
    "                                error_opts={'marker': '.', 'markersize': 10., 'color': 'k', 'elinewidth': 1},\n",
    "                                unc = 'num')\n",
    "        plt.title(title)\n",
    "        plt.ylim(bottom = 0, top = 0.12)\n",
    "        plt.xlim(left = 100, right = 2500)\n",
    "        #plt.xticks(np.array([0, 500, 600, 700]))\n",
    "        #mistag.set_xscale('function', functions=(forward, inverse))\n",
    "        #mistag.set_xscale('log')\n",
    "        \n",
    "        #plt.savefig(SaveDirectory+filename, bbox_inches=\"tight\")\n",
    "        #print(filename + ' saved')\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
=======
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\t\tfileset: QCD\n",
      "*****************************************************\n",
      "\n",
      "[6.09824827e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 7.79992843e-06 4.22600851e-06 4.36773962e-06 3.65275298e-06\n",
      " 3.22723372e-06 2.09537899e-06 7.37652840e-07 1.28391190e-06\n",
      " 4.58107536e-07 2.17051522e-07 3.08069161e-08 7.70609205e-07\n",
      " 1.51378913e-07 1.13511959e-07 3.76178512e-07 3.01342880e-08\n",
      " 3.26439903e-07 2.42969691e-07 1.01586011e-08 1.68334680e-10\n",
      " 0.00000000e+00 3.03323304e-08 4.89819740e-10 0.00000000e+00\n",
      " 1.98838279e-10 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 2.11059614e-10 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.07819136e-04 1.39023240e-04 1.05821459e-04 7.47512520e-05\n",
      " 4.82291048e-05 3.83986929e-05 2.66657100e-05 2.59532275e-05\n",
      " 1.75563173e-05 1.27778319e-05 9.29310153e-06 8.10752277e-06\n",
      " 5.32894007e-06 3.96160092e-06 3.83859368e-06 3.33545727e-06\n",
      " 1.83549244e-06 1.92399404e-06 4.55780530e-07 1.42372047e-06\n",
      " 1.28865967e-06 3.24638407e-07 4.65712484e-07 5.50366970e-07\n",
      " 1.63691833e-07 9.21121739e-08 2.36987717e-07 1.33905029e-08\n",
      " 1.16170185e-08 5.02041075e-09 2.11059614e-10 1.38306859e-08\n",
      " 1.88545528e-07 1.31187683e-09 1.17910531e-07 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: at0bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       7.23427093e-02, 3.03978567e-02, 4.12746118e-02, 4.88654422e-02,\n",
      "       6.69146511e-02, 5.45690186e-02, 2.76629739e-02, 4.94702210e-02,\n",
      "       2.60936009e-02, 1.69865689e-02, 3.31503062e-03, 9.50486637e-02,\n",
      "       2.84069460e-02, 2.86530524e-02, 9.79990444e-02, 9.03452975e-03,\n",
      "       1.77848677e-01, 1.26284014e-01, 2.22883612e-02, 1.18235765e-04,\n",
      "       0.00000000e+00, 9.34342018e-02, 1.05176425e-03, 0.00000000e+00,\n",
      "       1.21471105e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
      "       0.00000000e+00, 0.00000000e+00])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  0.000000\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.072343\n",
      "5     [500, 600)  0.030398\n",
      "6     [600, 700)  0.041275\n",
      "7     [700, 800)  0.048865\n",
      "8     [800, 900)  0.066915\n",
      "9    [900, 1000)  0.054569\n",
      "10  [1000, 1100)  0.027663\n",
      "11  [1100, 1200)  0.049470\n",
      "12  [1200, 1300)  0.026094\n",
      "13  [1300, 1400)  0.016987\n",
      "14  [1400, 1500)  0.003315\n",
      "15  [1500, 1600)  0.095049\n",
      "16  [1600, 1700)  0.028407\n",
      "17  [1700, 1800)  0.028653\n",
      "18  [1800, 1900)  0.097999\n",
      "19  [1900, 2000)  0.009035\n",
      "20  [2000, 2100)  0.177849\n",
      "21  [2100, 2200)  0.126284\n",
      "22  [2200, 2300)  0.022288\n",
      "23  [2300, 2400)  0.000118\n",
      "24  [2400, 2500)  0.000000\n",
      "25  [2500, 2600)  0.093434\n",
      "26  [2600, 2700)  0.001052\n",
      "27  [2700, 2800)  0.000000\n",
      "28  [2800, 2900)  0.001215\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.000000\n",
      "31  [3100, 3200)  0.000000\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.000000\n",
      "34  [3400, 3500)  1.000000\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.000000\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[5.71022113e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 4.88990690e-06 3.79468565e-06 3.06622042e-06 2.93525272e-06\n",
      " 2.00293744e-06 2.77594063e-06 1.60700347e-06 1.05313052e-06\n",
      " 5.84602276e-07 1.13660701e-06 6.96588131e-07 9.88312138e-07\n",
      " 5.69992494e-07 5.77982803e-07 3.27685825e-07 7.31531600e-08\n",
      " 4.82461573e-07 5.50485538e-07 1.51227823e-07 1.19826609e-07\n",
      " 8.87327474e-08 2.45347564e-09 1.52958819e-08 2.52848622e-08\n",
      " 7.56776330e-09 0.00000000e+00 1.80330062e-09 9.31686372e-09\n",
      " 0.00000000e+00 7.56735972e-08 4.26484803e-09 0.00000000e+00\n",
      " 0.00000000e+00 5.57997737e-09 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 6.77388020e-05 8.98593173e-05 7.39201863e-05 5.70349164e-05\n",
      " 4.70349437e-05 3.97287884e-05 3.18432079e-05 2.36213666e-05\n",
      " 2.25023910e-05 1.76192742e-05 1.73804284e-05 1.76308252e-05\n",
      " 1.30286126e-05 1.31341195e-05 1.16359595e-05 1.06915330e-05\n",
      " 8.65043599e-06 6.39129838e-06 7.07485582e-06 5.08660828e-06\n",
      " 4.25507592e-06 3.56599357e-06 1.82261166e-06 2.12508139e-06\n",
      " 1.96278141e-06 8.23718228e-07 7.59447168e-07 7.37865776e-07\n",
      " 4.68418902e-07 5.85635053e-07 3.02182549e-07 1.11536153e-07\n",
      " 1.41831379e-07 1.49057875e-07 7.81508760e-08 5.83414987e-08\n",
      " 2.40215741e-08 1.51503627e-08 1.59834599e-08 1.76314074e-10\n",
      " 7.80755727e-09 1.53228683e-08 7.07473191e-09 8.53617621e-10\n",
      " 0.00000000e+00 9.91668969e-11]\n",
      "\n",
      "fileset:  QCD\n",
      "category: at0bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([0.        , 0.        , 0.        , 0.        , 0.07218768,\n",
      "       0.04222918, 0.04148015, 0.05146414, 0.04258403, 0.06987227,\n",
      "       0.05046613, 0.04458381, 0.02597956, 0.0645093 , 0.04007888,\n",
      "       0.05605592, 0.04374929, 0.04400621, 0.02816148, 0.00684216,\n",
      "       0.05577309, 0.08613047, 0.02137539, 0.02355727, 0.02085339,\n",
      "       0.00068802, 0.00839229, 0.0118983 , 0.00385563, 0.        ,\n",
      "       0.00237449, 0.01262677, 0.        , 0.1292163 , 0.01411348,\n",
      "       0.        , 0.        , 0.03743497, 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  0.000000\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.072188\n",
      "5     [500, 600)  0.042229\n",
      "6     [600, 700)  0.041480\n",
      "7     [700, 800)  0.051464\n",
      "8     [800, 900)  0.042584\n",
      "9    [900, 1000)  0.069872\n",
      "10  [1000, 1100)  0.050466\n",
      "11  [1100, 1200)  0.044584\n",
      "12  [1200, 1300)  0.025980\n",
      "13  [1300, 1400)  0.064509\n",
      "14  [1400, 1500)  0.040079\n",
      "15  [1500, 1600)  0.056056\n",
      "16  [1600, 1700)  0.043749\n",
      "17  [1700, 1800)  0.044006\n",
      "18  [1800, 1900)  0.028161\n",
      "19  [1900, 2000)  0.006842\n",
      "20  [2000, 2100)  0.055773\n",
      "21  [2100, 2200)  0.086130\n",
      "22  [2200, 2300)  0.021375\n",
      "23  [2300, 2400)  0.023557\n",
      "24  [2400, 2500)  0.020853\n",
      "25  [2500, 2600)  0.000688\n",
      "26  [2600, 2700)  0.008392\n",
      "27  [2700, 2800)  0.011898\n",
      "28  [2800, 2900)  0.003856\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.002374\n",
      "31  [3100, 3200)  0.012627\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.129216\n",
      "34  [3400, 3500)  0.014113\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.037435\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[2.57648990e-05 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.17832678e-06 4.25367034e-07 6.17385012e-07 3.17981176e-07\n",
      " 2.06164259e-08 0.00000000e+00 0.00000000e+00 4.19704520e-08\n",
      " 1.32419245e-07 4.36528353e-07 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 9.34642230e-09 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 5.05703792e-06 6.34823300e-06 4.21245454e-06 4.16850162e-06\n",
      " 2.00724639e-06 9.15347982e-07 8.94414029e-07 2.10392989e-06\n",
      " 5.72605245e-07 1.18188962e-06 4.10685061e-07 3.45996853e-07\n",
      " 1.51555923e-09 0.00000000e+00 1.24538246e-08 4.82086989e-07\n",
      " 0.00000000e+00 1.89208109e-07 0.00000000e+00 0.00000000e+00\n",
      " 2.85654096e-08 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 1.05683284e-09 0.00000000e+00\n",
      " 1.16110641e-08 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: at1bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([0.        , 0.        , 0.        , 0.        , 0.23300731,\n",
      "       0.06700558, 0.14656182, 0.07628189, 0.010271  , 0.        ,\n",
      "       0.        , 0.0199486 , 0.23125748, 0.36934782, 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.7504861 , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  0.000000\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.233007\n",
      "5     [500, 600)  0.067006\n",
      "6     [600, 700)  0.146562\n",
      "7     [700, 800)  0.076282\n",
      "8     [800, 900)  0.010271\n",
      "9    [900, 1000)  0.000000\n",
      "10  [1000, 1100)  0.000000\n",
      "11  [1100, 1200)  0.019949\n",
      "12  [1200, 1300)  0.231257\n",
      "13  [1300, 1400)  0.369348\n",
      "14  [1400, 1500)  0.000000\n",
      "15  [1500, 1600)  0.000000\n",
      "16  [1600, 1700)  0.000000\n",
      "17  [1700, 1800)  0.000000\n",
      "18  [1800, 1900)  0.750486\n",
      "19  [1900, 2000)  0.000000\n",
      "20  [2000, 2100)  0.000000\n",
      "21  [2100, 2200)  0.000000\n",
      "22  [2200, 2300)  0.000000\n",
      "23  [2300, 2400)  0.000000\n",
      "24  [2400, 2500)  0.000000\n",
      "25  [2500, 2600)  0.000000\n",
      "26  [2600, 2700)  0.000000\n",
      "27  [2700, 2800)  0.000000\n",
      "28  [2800, 2900)  0.000000\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.000000\n",
      "31  [3100, 3200)  0.000000\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.000000\n",
      "34  [3400, 3500)  0.000000\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.000000\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[2.59963629e-05 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.26456143e-07 3.40245606e-07 8.68058123e-08 3.67261237e-07\n",
      " 1.01292244e-07 7.48150342e-08 1.39807526e-07 7.44807949e-09\n",
      " 2.93925950e-09 0.00000000e+00 0.00000000e+00 9.20152843e-10\n",
      " 0.00000000e+00 1.06028892e-07 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.59496267e-07\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 3.69583358e-06 3.42975181e-06 5.19701598e-06 1.87929959e-06\n",
      " 2.55065152e-06 1.86794932e-06 1.56068199e-06 1.32840955e-06\n",
      " 7.30881311e-07 7.35928552e-07 4.48223545e-07 2.31822213e-07\n",
      " 7.72923158e-07 7.37202299e-07 3.36124344e-07 5.13833584e-07\n",
      " 1.01615569e-07 3.21029802e-07 2.96647272e-07 1.39218173e-07\n",
      " 3.30346666e-08 1.82986696e-07 9.88729880e-08 1.59496267e-07\n",
      " 9.53295967e-08 4.83819349e-08 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.67337930e-08\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: at1bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([0.        , 0.        , 0.        , 0.        , 0.03421587,\n",
      "       0.09920415, 0.01670301, 0.19542453, 0.0397123 , 0.04005196,\n",
      "       0.08958105, 0.00560676, 0.00402153, 0.        , 0.        ,\n",
      "       0.00396922, 0.        , 0.14382605, 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 1.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  0.000000\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.034216\n",
      "5     [500, 600)  0.099204\n",
      "6     [600, 700)  0.016703\n",
      "7     [700, 800)  0.195425\n",
      "8     [800, 900)  0.039712\n",
      "9    [900, 1000)  0.040052\n",
      "10  [1000, 1100)  0.089581\n",
      "11  [1100, 1200)  0.005607\n",
      "12  [1200, 1300)  0.004022\n",
      "13  [1300, 1400)  0.000000\n",
      "14  [1400, 1500)  0.000000\n",
      "15  [1500, 1600)  0.003969\n",
      "16  [1600, 1700)  0.000000\n",
      "17  [1700, 1800)  0.143826\n",
      "18  [1800, 1900)  0.000000\n",
      "19  [1900, 2000)  0.000000\n",
      "20  [2000, 2100)  0.000000\n",
      "21  [2100, 2200)  0.000000\n",
      "22  [2200, 2300)  0.000000\n",
      "23  [2300, 2400)  0.000000\n",
      "24  [2400, 2500)  0.000000\n",
      "25  [2500, 2600)  0.000000\n",
      "26  [2600, 2700)  0.000000\n",
      "27  [2700, 2800)  1.000000\n",
      "28  [2800, 2900)  0.000000\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.000000\n",
      "31  [3100, 3200)  0.000000\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.000000\n",
      "34  [3400, 3500)  0.000000\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.000000\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[5.45123839e-07 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 4.89544618e-08 0.00000000e+00 6.37373887e-08 0.00000000e+00\n",
      " 2.46946001e-07 0.00000000e+00 1.85485987e-07 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: at2bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   0.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[3.14964382e-07 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 9.60735633e-08 0.00000000e+00 0.00000000e+00\n",
      " 6.59492798e-08 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.46974344e-07 0.00000000e+00 0.00000000e+00 5.96719474e-09\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: at2bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   0.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[0.00555302 0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.        ]\n",
      "[4.94319990e-03 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.00019208e-04 1.34797231e-04 1.01453719e-04 7.10984990e-05\n",
      " 4.50018711e-05 3.63033139e-05 2.59280572e-05 2.46693156e-05\n",
      " 1.70982098e-05 1.25607803e-05 9.26229461e-06 7.33691356e-06\n",
      " 5.17756116e-06 3.84808897e-06 3.46241517e-06 3.30532298e-06\n",
      " 1.50905254e-06 1.68102435e-06 4.45621929e-07 1.42355214e-06\n",
      " 1.28865967e-06 2.94306076e-07 4.65222664e-07 5.50366970e-07\n",
      " 1.63492995e-07 9.21121739e-08 2.36987717e-07 1.33905029e-08\n",
      " 1.16170185e-08 5.02041075e-09 0.00000000e+00 1.38306859e-08\n",
      " 1.88545528e-07 1.31187683e-09 1.17910531e-07 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 0t0bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1.12336641, 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  1.123366\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.000000\n",
      "5     [500, 600)  0.000000\n",
      "6     [600, 700)  0.000000\n",
      "7     [700, 800)  0.000000\n",
      "8     [800, 900)  0.000000\n",
      "9    [900, 1000)  0.000000\n",
      "10  [1000, 1100)  0.000000\n",
      "11  [1100, 1200)  0.000000\n",
      "12  [1200, 1300)  0.000000\n",
      "13  [1300, 1400)  0.000000\n",
      "14  [1400, 1500)  0.000000\n",
      "15  [1500, 1600)  0.000000\n",
      "16  [1600, 1700)  0.000000\n",
      "17  [1700, 1800)  0.000000\n",
      "18  [1800, 1900)  0.000000\n",
      "19  [1900, 2000)  0.000000\n",
      "20  [2000, 2100)  0.000000\n",
      "21  [2100, 2200)  0.000000\n",
      "22  [2200, 2300)  0.000000\n",
      "23  [2300, 2400)  0.000000\n",
      "24  [2400, 2500)  0.000000\n",
      "25  [2500, 2600)  0.000000\n",
      "26  [2600, 2700)  0.000000\n",
      "27  [2700, 2800)  0.000000\n",
      "28  [2800, 2900)  0.000000\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.000000\n",
      "31  [3100, 3200)  0.000000\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.000000\n",
      "34  [3400, 3500)  0.000000\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.000000\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[0.00592604 0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.        ]\n",
      "[5.35502201e-03 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 6.28488951e-05 8.60646317e-05 7.08539658e-05 5.40996637e-05\n",
      " 4.50320062e-05 3.69528477e-05 3.02362045e-05 2.25682361e-05\n",
      " 2.19177887e-05 1.64826672e-05 1.66838402e-05 1.66425131e-05\n",
      " 1.24586201e-05 1.25561367e-05 1.13082737e-05 1.06183799e-05\n",
      " 8.16797441e-06 5.84081284e-06 6.92362800e-06 4.96678167e-06\n",
      " 4.16634317e-06 3.56354009e-06 1.80731578e-06 2.09979653e-06\n",
      " 1.95521365e-06 8.23718228e-07 7.57643868e-07 7.28548912e-07\n",
      " 4.68418902e-07 5.09961456e-07 2.97917701e-07 1.11536153e-07\n",
      " 1.41831379e-07 1.43477898e-07 7.81508760e-08 5.83414987e-08\n",
      " 2.40215741e-08 1.51503627e-08 1.59834599e-08 1.76314074e-10\n",
      " 7.80755727e-09 1.53228683e-08 7.07473191e-09 8.53617621e-10\n",
      " 0.00000000e+00 9.91668969e-11]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 0t0bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1.10663301, 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  1.106633\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.000000\n",
      "5     [500, 600)  0.000000\n",
      "6     [600, 700)  0.000000\n",
      "7     [700, 800)  0.000000\n",
      "8     [800, 900)  0.000000\n",
      "9    [900, 1000)  0.000000\n",
      "10  [1000, 1100)  0.000000\n",
      "11  [1100, 1200)  0.000000\n",
      "12  [1200, 1300)  0.000000\n",
      "13  [1300, 1400)  0.000000\n",
      "14  [1400, 1500)  0.000000\n",
      "15  [1500, 1600)  0.000000\n",
      "16  [1600, 1700)  0.000000\n",
      "17  [1700, 1800)  0.000000\n",
      "18  [1800, 1900)  0.000000\n",
      "19  [1900, 2000)  0.000000\n",
      "20  [2000, 2100)  0.000000\n",
      "21  [2100, 2200)  0.000000\n",
      "22  [2200, 2300)  0.000000\n",
      "23  [2300, 2400)  0.000000\n",
      "24  [2400, 2500)  0.000000\n",
      "25  [2500, 2600)  0.000000\n",
      "26  [2600, 2700)  0.000000\n",
      "27  [2700, 2800)  0.000000\n",
      "28  [2800, 2900)  0.000000\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.000000\n",
      "31  [3100, 3200)  0.000000\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.000000\n",
      "34  [3400, 3500)  0.000000\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.000000\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[0.00019376 0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.        ]\n",
      "[1.67996544e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 3.87871114e-06 5.92286597e-06 3.59506953e-06 3.85052044e-06\n",
      " 1.98662997e-06 9.15347982e-07 8.94414029e-07 2.06195944e-06\n",
      " 4.40186000e-07 7.45361262e-07 4.10685061e-07 3.45996853e-07\n",
      " 1.51555923e-09 0.00000000e+00 3.10740234e-09 4.82086989e-07\n",
      " 0.00000000e+00 1.89208109e-07 0.00000000e+00 0.00000000e+00\n",
      " 2.85654096e-08 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 1.05683284e-09 0.00000000e+00\n",
      " 1.16110641e-08 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 0t1bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1.15336565, 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  1.153366\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.000000\n",
      "5     [500, 600)  0.000000\n",
      "6     [600, 700)  0.000000\n",
      "7     [700, 800)  0.000000\n",
      "8     [800, 900)  0.000000\n",
      "9    [900, 1000)  0.000000\n",
      "10  [1000, 1100)  0.000000\n",
      "11  [1100, 1200)  0.000000\n",
      "12  [1200, 1300)  0.000000\n",
      "13  [1300, 1400)  0.000000\n",
      "14  [1400, 1500)  0.000000\n",
      "15  [1500, 1600)  0.000000\n",
      "16  [1600, 1700)  0.000000\n",
      "17  [1700, 1800)  0.000000\n",
      "18  [1800, 1900)  0.000000\n",
      "19  [1900, 2000)  0.000000\n",
      "20  [2000, 2100)  0.000000\n",
      "21  [2100, 2200)  0.000000\n",
      "22  [2200, 2300)  0.000000\n",
      "23  [2300, 2400)  0.000000\n",
      "24  [2400, 2500)  0.000000\n",
      "25  [2500, 2600)  0.000000\n",
      "26  [2600, 2700)  0.000000\n",
      "27  [2700, 2800)  0.000000\n",
      "28  [2800, 2900)  0.000000\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.000000\n",
      "31  [3100, 3200)  0.000000\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.000000\n",
      "34  [3400, 3500)  0.000000\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.000000\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[0.00017421 0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.        ]\n",
      "[1.48216511e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 3.56937744e-06 3.08950621e-06 5.11021017e-06 1.51203835e-06\n",
      " 2.44935927e-06 1.79313429e-06 1.42087447e-06 1.32096147e-06\n",
      " 7.27942052e-07 7.35928552e-07 4.48223545e-07 2.30902060e-07\n",
      " 7.72923158e-07 6.31173407e-07 3.36124344e-07 5.13833584e-07\n",
      " 1.01615569e-07 3.21029802e-07 2.96647272e-07 1.39218173e-07\n",
      " 3.30346666e-08 1.82986696e-07 9.88729880e-08 0.00000000e+00\n",
      " 9.53295967e-08 4.83819349e-08 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.67337930e-08\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 0t1bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1.17539451, 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  1.175395\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.000000\n",
      "5     [500, 600)  0.000000\n",
      "6     [600, 700)  0.000000\n",
      "7     [700, 800)  0.000000\n",
      "8     [800, 900)  0.000000\n",
      "9    [900, 1000)  0.000000\n",
      "10  [1000, 1100)  0.000000\n",
      "11  [1100, 1200)  0.000000\n",
      "12  [1200, 1300)  0.000000\n",
      "13  [1300, 1400)  0.000000\n",
      "14  [1400, 1500)  0.000000\n",
      "15  [1500, 1600)  0.000000\n",
      "16  [1600, 1700)  0.000000\n",
      "17  [1700, 1800)  0.000000\n",
      "18  [1800, 1900)  0.000000\n",
      "19  [1900, 2000)  0.000000\n",
      "20  [2000, 2100)  0.000000\n",
      "21  [2100, 2200)  0.000000\n",
      "22  [2200, 2300)  0.000000\n",
      "23  [2300, 2400)  0.000000\n",
      "24  [2400, 2500)  0.000000\n",
      "25  [2500, 2600)  0.000000\n",
      "26  [2600, 2700)  0.000000\n",
      "27  [2700, 2800)  0.000000\n",
      "28  [2800, 2900)  0.000000\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.000000\n",
      "31  [3100, 3200)  0.000000\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.000000\n",
      "34  [3400, 3500)  0.000000\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.000000\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[2.99353451e-06 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[2.44841067e-06 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 4.89544618e-08 0.00000000e+00 6.37373887e-08 0.00000000e+00\n",
      " 2.46946001e-07 0.00000000e+00 1.85485987e-07 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 0t2bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1.22264396, 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p      M(p)\n",
      "0       [0, 100)  1.222644\n",
      "1     [100, 200)  0.000000\n",
      "2     [200, 300)  0.000000\n",
      "3     [300, 400)  0.000000\n",
      "4     [400, 500)  0.000000\n",
      "5     [500, 600)  0.000000\n",
      "6     [600, 700)  0.000000\n",
      "7     [700, 800)  0.000000\n",
      "8     [800, 900)  0.000000\n",
      "9    [900, 1000)  0.000000\n",
      "10  [1000, 1100)  0.000000\n",
      "11  [1100, 1200)  0.000000\n",
      "12  [1200, 1300)  0.000000\n",
      "13  [1300, 1400)  0.000000\n",
      "14  [1400, 1500)  0.000000\n",
      "15  [1500, 1600)  0.000000\n",
      "16  [1600, 1700)  0.000000\n",
      "17  [1700, 1800)  0.000000\n",
      "18  [1800, 1900)  0.000000\n",
      "19  [1900, 2000)  0.000000\n",
      "20  [2000, 2100)  0.000000\n",
      "21  [2100, 2200)  0.000000\n",
      "22  [2200, 2300)  0.000000\n",
      "23  [2300, 2400)  0.000000\n",
      "24  [2400, 2500)  0.000000\n",
      "25  [2500, 2600)  0.000000\n",
      "26  [2600, 2700)  0.000000\n",
      "27  [2700, 2800)  0.000000\n",
      "28  [2800, 2900)  0.000000\n",
      "29  [2900, 3000)  0.000000\n",
      "30  [3000, 3100)  0.000000\n",
      "31  [3100, 3200)  0.000000\n",
      "32  [3200, 3300)  0.000000\n",
      "33  [3300, 3400)  0.000000\n",
      "34  [3400, 3500)  0.000000\n",
      "35  [3500, 3600)  0.000000\n",
      "36  [3600, 3700)  0.000000\n",
      "37  [3700, 3800)  0.000000\n",
      "38  [3800, 3900)  0.000000\n",
      "39  [3900, 4000)  0.000000\n",
      "40  [4000, 4100)  0.000000\n",
      "41  [4100, 4200)  0.000000\n",
      "42  [4200, 4300)  0.000000\n",
      "43  [4300, 4400)  0.000000\n",
      "44  [4400, 4500)  0.000000\n",
      "45  [4500, 4600)  0.000000\n",
      "46  [4600, 4700)  0.000000\n",
      "47  [4700, 4800)  0.000000\n",
      "48  [4800, 4900)  0.000000\n",
      "49  [4900, 5000)  0.000000\n",
      "\n",
      "\n",
      "[8.03107014e-07 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[4.88142632e-07 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 9.60735633e-08 0.00000000e+00 0.00000000e+00\n",
      " 6.59492798e-08 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.46974344e-07 0.00000000e+00 0.00000000e+00 5.96719474e-09\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 0t2bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1.64523023, 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ,\n",
      "       0.        , 0.        , 0.        , 0.        , 0.        ])}\n",
      "\n",
      "               p     M(p)\n",
      "0       [0, 100)  1.64523\n",
      "1     [100, 200)  0.00000\n",
      "2     [200, 300)  0.00000\n",
      "3     [300, 400)  0.00000\n",
      "4     [400, 500)  0.00000\n",
      "5     [500, 600)  0.00000\n",
      "6     [600, 700)  0.00000\n",
      "7     [700, 800)  0.00000\n",
      "8     [800, 900)  0.00000\n",
      "9    [900, 1000)  0.00000\n",
      "10  [1000, 1100)  0.00000\n",
      "11  [1100, 1200)  0.00000\n",
      "12  [1200, 1300)  0.00000\n",
      "13  [1300, 1400)  0.00000\n",
      "14  [1400, 1500)  0.00000\n",
      "15  [1500, 1600)  0.00000\n",
      "16  [1600, 1700)  0.00000\n",
      "17  [1700, 1800)  0.00000\n",
      "18  [1800, 1900)  0.00000\n",
      "19  [1900, 2000)  0.00000\n",
      "20  [2000, 2100)  0.00000\n",
      "21  [2100, 2200)  0.00000\n",
      "22  [2200, 2300)  0.00000\n",
      "23  [2300, 2400)  0.00000\n",
      "24  [2400, 2500)  0.00000\n",
      "25  [2500, 2600)  0.00000\n",
      "26  [2600, 2700)  0.00000\n",
      "27  [2700, 2800)  0.00000\n",
      "28  [2800, 2900)  0.00000\n",
      "29  [2900, 3000)  0.00000\n",
      "30  [3000, 3100)  0.00000\n",
      "31  [3100, 3200)  0.00000\n",
      "32  [3200, 3300)  0.00000\n",
      "33  [3300, 3400)  0.00000\n",
      "34  [3400, 3500)  0.00000\n",
      "35  [3500, 3600)  0.00000\n",
      "36  [3600, 3700)  0.00000\n",
      "37  [3700, 3800)  0.00000\n",
      "38  [3800, 3900)  0.00000\n",
      "39  [3900, 4000)  0.00000\n",
      "40  [4000, 4100)  0.00000\n",
      "41  [4100, 4200)  0.00000\n",
      "42  [4200, 4300)  0.00000\n",
      "43  [4300, 4400)  0.00000\n",
      "44  [4400, 4500)  0.00000\n",
      "45  [4500, 4600)  0.00000\n",
      "46  [4600, 4700)  0.00000\n",
      "47  [4700, 4800)  0.00000\n",
      "48  [4800, 4900)  0.00000\n",
      "49  [4900, 5000)  0.00000\n",
      "\n",
      "\n",
      "[5.57260423e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 7.79992843e-06 4.22600851e-06 4.36773962e-06 3.65275298e-06\n",
      " 3.22723372e-06 2.09537899e-06 7.37652840e-07 1.28391190e-06\n",
      " 4.58107536e-07 2.17051522e-07 3.08069161e-08 7.70609205e-07\n",
      " 1.51378913e-07 1.13511959e-07 3.76178512e-07 3.01342880e-08\n",
      " 3.26439903e-07 2.42969691e-07 1.01586011e-08 1.68334680e-10\n",
      " 0.00000000e+00 3.03323304e-08 4.89819740e-10 0.00000000e+00\n",
      " 1.98838279e-10 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 2.11059614e-10 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[5.57260423e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 7.79992843e-06 4.22600851e-06 4.36773962e-06 3.65275298e-06\n",
      " 3.22723372e-06 2.09537899e-06 7.37652840e-07 1.28391190e-06\n",
      " 4.58107536e-07 2.17051522e-07 3.08069161e-08 7.70609205e-07\n",
      " 1.51378913e-07 1.13511959e-07 3.76178512e-07 3.01342880e-08\n",
      " 3.26439903e-07 2.42969691e-07 1.01586011e-08 1.68334680e-10\n",
      " 0.00000000e+00 3.03323304e-08 4.89819740e-10 0.00000000e+00\n",
      " 1.98838279e-10 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 2.11059614e-10 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 1t0bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
      "       1., 1., 1., 1., 1., 1., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,\n",
      "       1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   1.0\n",
      "5     [500, 600)   1.0\n",
      "6     [600, 700)   1.0\n",
      "7     [700, 800)   1.0\n",
      "8     [800, 900)   1.0\n",
      "9    [900, 1000)   1.0\n",
      "10  [1000, 1100)   1.0\n",
      "11  [1100, 1200)   1.0\n",
      "12  [1200, 1300)   1.0\n",
      "13  [1300, 1400)   1.0\n",
      "14  [1400, 1500)   1.0\n",
      "15  [1500, 1600)   1.0\n",
      "16  [1600, 1700)   1.0\n",
      "17  [1700, 1800)   1.0\n",
      "18  [1800, 1900)   1.0\n",
      "19  [1900, 2000)   1.0\n",
      "20  [2000, 2100)   1.0\n",
      "21  [2100, 2200)   1.0\n",
      "22  [2200, 2300)   1.0\n",
      "23  [2300, 2400)   1.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   1.0\n",
      "26  [2600, 2700)   1.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   1.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   1.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[5.19584656e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 4.88990690e-06 3.79468565e-06 3.06622042e-06 2.93525272e-06\n",
      " 2.00293744e-06 2.77594063e-06 1.60700347e-06 1.05313052e-06\n",
      " 5.84602276e-07 1.13660701e-06 6.96588131e-07 9.88312138e-07\n",
      " 5.69992494e-07 5.77982803e-07 3.27685825e-07 7.31531600e-08\n",
      " 4.82461573e-07 5.50485538e-07 1.51227823e-07 1.19826609e-07\n",
      " 8.87327474e-08 2.45347564e-09 1.52958819e-08 2.52848622e-08\n",
      " 7.56776330e-09 0.00000000e+00 1.80330062e-09 9.31686372e-09\n",
      " 0.00000000e+00 7.56735972e-08 4.26484803e-09 0.00000000e+00\n",
      " 0.00000000e+00 5.57997737e-09 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[5.19584656e-04 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 4.88990690e-06 3.79468565e-06 3.06622042e-06 2.93525272e-06\n",
      " 2.00293744e-06 2.77594063e-06 1.60700347e-06 1.05313052e-06\n",
      " 5.84602276e-07 1.13660701e-06 6.96588131e-07 9.88312138e-07\n",
      " 5.69992494e-07 5.77982803e-07 3.27685825e-07 7.31531600e-08\n",
      " 4.82461573e-07 5.50485538e-07 1.51227823e-07 1.19826609e-07\n",
      " 8.87327474e-08 2.45347564e-09 1.52958819e-08 2.52848622e-08\n",
      " 7.56776330e-09 0.00000000e+00 1.80330062e-09 9.31686372e-09\n",
      " 0.00000000e+00 7.56735972e-08 4.26484803e-09 0.00000000e+00\n",
      " 0.00000000e+00 5.57997737e-09 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 1t0bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
      "       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 1., 1., 0., 1.,\n",
      "       1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   1.0\n",
      "5     [500, 600)   1.0\n",
      "6     [600, 700)   1.0\n",
      "7     [700, 800)   1.0\n",
      "8     [800, 900)   1.0\n",
      "9    [900, 1000)   1.0\n",
      "10  [1000, 1100)   1.0\n",
      "11  [1100, 1200)   1.0\n",
      "12  [1200, 1300)   1.0\n",
      "13  [1300, 1400)   1.0\n",
      "14  [1400, 1500)   1.0\n",
      "15  [1500, 1600)   1.0\n",
      "16  [1600, 1700)   1.0\n",
      "17  [1700, 1800)   1.0\n",
      "18  [1800, 1900)   1.0\n",
      "19  [1900, 2000)   1.0\n",
      "20  [2000, 2100)   1.0\n",
      "21  [2100, 2200)   1.0\n",
      "22  [2200, 2300)   1.0\n",
      "23  [2300, 2400)   1.0\n",
      "24  [2400, 2500)   1.0\n",
      "25  [2500, 2600)   1.0\n",
      "26  [2600, 2700)   1.0\n",
      "27  [2700, 2800)   1.0\n",
      "28  [2800, 2900)   1.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   1.0\n",
      "31  [3100, 3200)   1.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   1.0\n",
      "34  [3400, 3500)   1.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   1.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[2.54410182e-05 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.17832678e-06 4.25367034e-07 6.17385012e-07 3.17981176e-07\n",
      " 2.06164259e-08 0.00000000e+00 0.00000000e+00 4.19704520e-08\n",
      " 1.32419245e-07 4.36528353e-07 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 9.34642230e-09 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[2.54410182e-05 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.17832678e-06 4.25367034e-07 6.17385012e-07 3.17981176e-07\n",
      " 2.06164259e-08 0.00000000e+00 0.00000000e+00 4.19704520e-08\n",
      " 1.32419245e-07 4.36528353e-07 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 9.34642230e-09 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 1t1bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,\n",
      "       0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   1.0\n",
      "5     [500, 600)   1.0\n",
      "6     [600, 700)   1.0\n",
      "7     [700, 800)   1.0\n",
      "8     [800, 900)   1.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   1.0\n",
      "12  [1200, 1300)   1.0\n",
      "13  [1300, 1400)   1.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   1.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.31370453e-05 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.26456143e-07 3.40245606e-07 8.68058123e-08 3.67261237e-07\n",
      " 1.01292244e-07 7.48150342e-08 1.39807526e-07 7.44807949e-09\n",
      " 2.93925950e-09 0.00000000e+00 0.00000000e+00 9.20152843e-10\n",
      " 0.00000000e+00 1.06028892e-07 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.59496267e-07\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[2.31370453e-05 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 1.26456143e-07 3.40245606e-07 8.68058123e-08 3.67261237e-07\n",
      " 1.01292244e-07 7.48150342e-08 1.39807526e-07 7.44807949e-09\n",
      " 2.93925950e-09 0.00000000e+00 0.00000000e+00 9.20152843e-10\n",
      " 0.00000000e+00 1.06028892e-07 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 1.59496267e-07\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 1t1bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0.,\n",
      "       1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   1.0\n",
      "5     [500, 600)   1.0\n",
      "6     [600, 700)   1.0\n",
      "7     [700, 800)   1.0\n",
      "8     [800, 900)   1.0\n",
      "9    [900, 1000)   1.0\n",
      "10  [1000, 1100)   1.0\n",
      "11  [1100, 1200)   1.0\n",
      "12  [1200, 1300)   1.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   1.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   1.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   1.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[2.7801434e-07 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00]\n",
      "[2.7801434e-07 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 1t2bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[5.54048711e-07 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[5.54048711e-07 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 1t2bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[1.11125493e-05 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[1.11125493e-05 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 2t0bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[1.5390985e-05 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00]\n",
      "[1.5390985e-05 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00\n",
      " 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00 0.0000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 2t0bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[1.31720844e-06 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[1.31720844e-06 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 2t1bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[5.61219622e-07 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "[5.61219622e-07 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00\n",
      " 0.00000000e+00 0.00000000e+00]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 2t1bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   1.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0.]\n",
      "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0.]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 2t2bcen\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   0.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n",
      "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0.]\n",
      "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n",
      " 0. 0.]\n",
      "\n",
      "fileset:  QCD\n",
      "category: 2t2bfwd\n",
      "________________________________________________\n",
      "\n",
      "d vals =  {'p': [<Interval ([0, 100)) instance at 0x7fb34a7e8c90>, <Interval ([100, 200)) instance at 0x7fb34a7e8410>, <Interval ([200, 300)) instance at 0x7fb34a7e8890>, <Interval ([300, 400)) instance at 0x7fb34a7e8850>, <Interval ([400, 500)) instance at 0x7fb34a823c50>, <Interval ([500, 600)) instance at 0x7fb34a823290>, <Interval ([600, 700)) instance at 0x7fb34a823b50>, <Interval ([700, 800)) instance at 0x7fb34ad84850>, <Interval ([800, 900)) instance at 0x7fb34a823150>, <Interval ([900, 1000)) instance at 0x7fb34ad84990>, <Interval ([1000, 1100)) instance at 0x7fb34ad84890>, <Interval ([1100, 1200)) instance at 0x7fb34adbc0d0>, <Interval ([1200, 1300)) instance at 0x7fb34adbaf90>, <Interval ([1300, 1400)) instance at 0x7fb34adbaf50>, <Interval ([1400, 1500)) instance at 0x7fb34adef790>, <Interval ([1500, 1600)) instance at 0x7fb34adef690>, <Interval ([1600, 1700)) instance at 0x7fb34adef650>, <Interval ([1700, 1800)) instance at 0x7fb34ae22e10>, <Interval ([1800, 1900)) instance at 0x7fb34ae22d10>, <Interval ([1900, 2000)) instance at 0x7fb34ae22cd0>, <Interval ([2000, 2100)) instance at 0x7fb34ae57dd0>, <Interval ([2100, 2200)) instance at 0x7fb34ae57cd0>, <Interval ([2200, 2300)) instance at 0x7fb34ae57c90>, <Interval ([2300, 2400)) instance at 0x7fb34af02d90>, <Interval ([2400, 2500)) instance at 0x7fb34af02c90>, <Interval ([2500, 2600)) instance at 0x7fb34af02c50>, <Interval ([2600, 2700)) instance at 0x7fb34af3ead0>, <Interval ([2700, 2800)) instance at 0x7fb34af3e9d0>, <Interval ([2800, 2900)) instance at 0x7fb34af3e990>, <Interval ([2900, 3000)) instance at 0x7fb34af5f810>, <Interval ([3000, 3100)) instance at 0x7fb34af5f710>, <Interval ([3100, 3200)) instance at 0x7fb34af5f6d0>, <Interval ([3200, 3300)) instance at 0x7fb34af99810>, <Interval ([3300, 3400)) instance at 0x7fb34af99710>, <Interval ([3400, 3500)) instance at 0x7fb34af996d0>, <Interval ([3500, 3600)) instance at 0x7fb34b041090>, <Interval ([3600, 3700)) instance at 0x7fb34b03af50>, <Interval ([3700, 3800)) instance at 0x7fb34b03af10>, <Interval ([3800, 3900)) instance at 0x7fb34b070250>, <Interval ([3900, 4000)) instance at 0x7fb34b070150>, <Interval ([4000, 4100)) instance at 0x7fb34b070110>, <Interval ([4100, 4200)) instance at 0x7fb34b09fc10>, <Interval ([4200, 4300)) instance at 0x7fb34b09fb10>, <Interval ([4300, 4400)) instance at 0x7fb34b09fad0>, <Interval ([4400, 4500)) instance at 0x7fb34b0d6d10>, <Interval ([4500, 4600)) instance at 0x7fb34b0d6c10>, <Interval ([4600, 4700)) instance at 0x7fb34b0d6bd0>, <Interval ([4700, 4800)) instance at 0x7fb34b189710>, <Interval ([4800, 4900)) instance at 0x7fb34b189610>, <Interval ([4900, 5000)) instance at 0x7fb34b1895d0>], 'M(p)': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
      "       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])}\n",
      "\n",
      "               p  M(p)\n",
      "0       [0, 100)   0.0\n",
      "1     [100, 200)   0.0\n",
      "2     [200, 300)   0.0\n",
      "3     [300, 400)   0.0\n",
      "4     [400, 500)   0.0\n",
      "5     [500, 600)   0.0\n",
      "6     [600, 700)   0.0\n",
      "7     [700, 800)   0.0\n",
      "8     [800, 900)   0.0\n",
      "9    [900, 1000)   0.0\n",
      "10  [1000, 1100)   0.0\n",
      "11  [1100, 1200)   0.0\n",
      "12  [1200, 1300)   0.0\n",
      "13  [1300, 1400)   0.0\n",
      "14  [1400, 1500)   0.0\n",
      "15  [1500, 1600)   0.0\n",
      "16  [1600, 1700)   0.0\n",
      "17  [1700, 1800)   0.0\n",
      "18  [1800, 1900)   0.0\n",
      "19  [1900, 2000)   0.0\n",
      "20  [2000, 2100)   0.0\n",
      "21  [2100, 2200)   0.0\n",
      "22  [2200, 2300)   0.0\n",
      "23  [2300, 2400)   0.0\n",
      "24  [2400, 2500)   0.0\n",
      "25  [2500, 2600)   0.0\n",
      "26  [2600, 2700)   0.0\n",
      "27  [2700, 2800)   0.0\n",
      "28  [2800, 2900)   0.0\n",
      "29  [2900, 3000)   0.0\n",
      "30  [3000, 3100)   0.0\n",
      "31  [3100, 3200)   0.0\n",
      "32  [3200, 3300)   0.0\n",
      "33  [3300, 3400)   0.0\n",
      "34  [3400, 3500)   0.0\n",
      "35  [3500, 3600)   0.0\n",
      "36  [3600, 3700)   0.0\n",
      "37  [3700, 3800)   0.0\n",
      "38  [3800, 3900)   0.0\n",
      "39  [3900, 4000)   0.0\n",
      "40  [4000, 4100)   0.0\n",
      "41  [4100, 4200)   0.0\n",
      "42  [4200, 4300)   0.0\n",
      "43  [4300, 4400)   0.0\n",
      "44  [4400, 4500)   0.0\n",
      "45  [4500, 4600)   0.0\n",
      "46  [4600, 4700)   0.0\n",
      "47  [4700, 4800)   0.0\n",
      "48  [4800, 4900)   0.0\n",
      "49  [4900, 5000)   0.0\n",
      "\n",
      "\n"
     ]
    }
   ],
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "source": [
    "\"\"\" ---------------- LOOK UP TABLE ---------------- \"\"\"\n",
    "# ---- Only Use This Cell When LookUp Tables Are Not In Use (i.e. UseLookUpTables = False) ---- #\n",
    "from collections import defaultdict\n",
    "\n",
    "runLUTS = True \n",
    "\n",
    "def multi_dict(K, type): # definition from https://www.geeksforgeeks.org/python-creating-multidimensional-dictionary/\n",
    "    if K == 1: \n",
    "        return defaultdict(type) \n",
    "    else: \n",
    "        return defaultdict(lambda: multi_dict(K-1, type))\n",
    "    \n",
    "luts = {}\n",
    "luts = multi_dict(2, str)\n",
    "\n",
    "if runLUTS : \n",
    "\n",
    "    SaveDirectory = maindirectory + '/LookupTables/'\n",
    "    DoesDirectoryExist(SaveDirectory)\n",
    "\n",
    "\n",
    "\n",
    "    for iset in filesets:\n",
    "        print('\\t\\tfileset: ' + iset + '\\n*****************************************************\\n')\n",
    "        for icat in list_of_cats:\n",
    "            title = iset + ' mistag ' + icat\n",
    "            filename = 'mistag_' + iset + '_' + icat + '.' + 'csv'\n",
    "\n",
    "            Numerator = outputs_unweighted[iset]['numerator'].integrate('anacat',icat).integrate('dataset',iset)\n",
    "            Denominator = outputs_unweighted[iset]['denominator'].integrate('anacat',icat).integrate('dataset',iset)\n",
    "            \n",
    "            \n",
    "            \n",
    "            N_vals = Numerator.values()[()]\n",
    "            D_vals = Denominator.values()[()]\n",
    "            print(N_vals)\n",
    "            print(D_vals)\n",
    "            print()\n",
    "            mistag_vals = np.where(D_vals > 0, N_vals / D_vals, 0)\n",
    "\n",
    "\n",
    "            p_vals = [] # Momentum values\n",
    "            for iden in Numerator.identifiers('jetp'):\n",
    "                p_vals.append(iden)\n",
    "                \n",
    "            \n",
    "            print('fileset:  ' + iset)\n",
    "            print('category: ' + icat)\n",
    "            print('________________________________________________\\n')\n",
    "\n",
    "            d = {'p': p_vals, 'M(p)': mistag_vals}\n",
    "            \n",
    "            #print(\"p vals = \", p_vals)\n",
    "            print(\"d vals = \", d)\n",
    "            print()\n",
    "            df = pd.DataFrame(data=d)\n",
    "            luts[iset][icat] = df\n",
    "\n",
    "            with pd.option_context('display.max_rows', None, 'display.max_columns', None): \n",
    "                print(df)\n",
    "            print('\\n')\n",
    "\n",
    "            df.to_csv(SaveDirectory+filename) # use later to collect bins and weights for re-scaling\n",
    "else :\n",
    "    for iset in filesets:\n",
    "        print('\\t\\tfileset: ' + iset + '\\n*****************************************************\\n')\n",
    "        for icat in list_of_cats:\n",
    "            title = iset + ' mistag ' + icat\n",
    "            filename = 'mistag_' + iset + '_' + icat + '.' + 'csv'\n",
    "            luts[iset][icat] = pd.read_csv(filename)\n",
    "print(luts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Events/s: 174743.22338041294\n"
     ]
    }
   ],
   "source": [
    "print(\"Events/s:\", output['cutflow']['all events']/elapsed)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "tstart = time.time()\n",
    "\n",
    "fileset = {\n",
    "    'QCD':qcdfiles\n",
    "}\n",
    "\n",
    "outputs_weighted = {}\n",
    "\n",
    "prng = RandomState(seed)\n",
    "\n",
    "output_weighted = processor.run_uproot_job(fileset,\n",
    "                                  treename='Events',\n",
    "                                  processor_instance=TTbarResProcessor(UseLookUpTables=True, lu=luts,\n",
    "                                                                      prng=prng),\n",
    "                                  executor=processor.dask_executor,\n",
    "                                  #executor=processor.iterative_executor,\n",
    "                                  #executor=processor.futures_executor,\n",
    "                                  executor_args={\n",
    "                                      'client': client, \n",
    "                                      'nano':False, \n",
    "                                      'flatten':True, \n",
    "                                      'skipbadfiles':False,\n",
    "                                      'workers': 2},\n",
    "                                  chunksize=100000#, maxchunks=10\n",
    "                                 )\n",
    "\n",
    "elapsed = time.time() - tstart\n",
    "outputs_weighted['QCD'] = output_weighted\n",
    "print(output_weighted)\n",
    "print(elapsed)\n",
    "util.save(output_weighted, 'TTbarResCoffea_full_weighted_QCD_output.coffea')\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filesets = {\n",
    "    #'QCD':qcdfiles,\n",
    "    #'TTbar':ttbarfiles\n",
    "    'JetHT':jetdatafiles,\n",
    "    'JetHT2016_Data':jetdatafiles2016,\n",
    "    'JetHT2017_Data':jetdatafiles2017,\n",
    "    'JetHT2018_Data':jetdatafiles2018\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
=======
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QCD\n",
      "['At0bcen', 'At0bfwd', 'At1bcen', 'At1bfwd', 'At2bcen', 'At2bfwd', 'at0bcen', 'at0bfwd', 'at1bcen', 'at1bfwd', 'at2bcen', 'at2bfwd', '0t0bcen', '0t0bfwd', '0t1bcen', '0t1bfwd', '0t2bcen', '0t2bfwd', '1t0bcen', '1t0bfwd', '1t1bcen', '1t1bfwd', '1t2bcen', '1t2bfwd', '2t0bcen', '2t0bfwd', '2t1bcen', '2t1bfwd', '2t2bcen', '2t2bfwd']\n",
      "{'ttbarmass': <Hist (dataset,anacat,ttbarmass) instance at 0x7fb34afce0d0>, 'jetmass': <Hist (dataset,anacat,jetmass) instance at 0x7fb34a92b150>, 'jetpt': <Hist (dataset,anacat,jetpt) instance at 0x7fb34a92b910>, 'jeteta': <Hist (dataset,anacat,jeteta) instance at 0x7fb369495450>, 'probept': <Hist (dataset,anacat,jetpt) instance at 0x7fb3694952d0>, 'probep': <Hist (dataset,anacat,jetp) instance at 0x7fb3694955d0>, 'jetphi': <Hist (dataset,anacat,jetphi) instance at 0x7fb369495190>, 'jety': <Hist (dataset,anacat,jety) instance at 0x7fb369495dd0>, 'jetdy': <Hist (dataset,anacat,jetdy) instance at 0x7fb369495490>, 'subjetmass': <Hist (dataset,anacat,subjetmass) instance at 0x7fb369495410>, 'subjetpt': <Hist (dataset,anacat,subjetpt) instance at 0x7fb369495210>, 'subjeteta': <Hist (dataset,anacat,subjeteta) instance at 0x7fb34a856b10>, 'subjetphi': <Hist (dataset,anacat,subjetphi) instance at 0x7fb34a856990>, 'numerator': <Hist (dataset,anacat,jetp) instance at 0x7fb34a856490>, 'denominator': <Hist (dataset,anacat,jetp) instance at 0x7fb34a856090>, 'cutflow': defaultdict_accumulator(<class 'int'>, {'all events': 18455107, 'one FatJets': 730025, 'two FatJets': 707972, 'jet id': 707968, 'jet kin': 438639, 'two FatJets and jet kin': 343714, '>= one oneTTbar': 343714, 'dPhi > 2.1': 179192, 'sumw': 0.013068939791082812, 'sumw2': 2.998777319344892e-09, 'At0bcen': 362, 'At0bfwd': 325, 'At1bcen': 20, 'At1bfwd': 16, 'At2bcen': 0, 'At2bfwd': 0, 'at0bcen': 8473, 'at0bfwd': 7505, 'at1bcen': 319, 'at1bfwd': 254, 'at2bcen': 4, 'at2bfwd': 5, '0t0bcen': 83587, '0t0bfwd': 76795, '0t1bcen': 2126, '0t1bfwd': 1759, '0t2bcen': 18, '0t2bfwd': 11, '1t0bcen': 7512, '1t0bfwd': 6551, '1t1bcen': 276, '1t1bfwd': 252, '1t2bcen': 2, '1t2bfwd': 5, '2t0bcen': 149, '2t0bfwd': 134, '2t1bcen': 7, '2t1bfwd': 8, '2t2bcen': 0, '2t2bfwd': 0})}\n"
     ]
    }
   ],
>>>>>>> b9a77f8354d8c53aca485876b4dc4e0677c49dd5
   "source": [
    "tstart = time.time()\n",
    "\n",
    "outputs_weighted = {}\n",
    "\n",
    "prng = RandomState(seed)\n",
    "\n",
    "for name,files in filesets.items(): \n",
    "    \n",
    "\n",
    "    print(name)\n",
    "    output = processor.run_uproot_job({name:files},\n",
    "                                      treename='Events',\n",
    "                                      processor_instance=TTbarResProcessor(UseLookUpTables=True,\n",
    "                                                                           lu=luts,\n",
    "                                                                           prng=prng),\n",
    "                                      executor=processor.dask_executor,\n",
    "                                      #executor=processor.iterative_executor,\n",
    "                                      #executor=processor.futures_executor,\n",
    "                                      executor_args={\n",
    "                                          'client': client, \n",
    "                                          'nano':False, \n",
    "                                          'flatten':True, \n",
    "                                          'skipbadfiles':False,\n",
    "                                          'workers': 2},\n",
    "                                      chunksize=100000, maxchunks=600\n",
    "                                     )\n",
    "\n",
    "    elapsed = time.time() - tstart\n",
    "    outputs_weighted[name] = output\n",
    "    print(output)\n",
    "    util.save(output, 'TTbarResCoffea_' + name + '_weighted_output.coffea')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------Unweighted QCD--------\n",
      "          all events :     18455107\n",
      "         one FatJets :       730025\n",
      "         two FatJets :       707972\n",
      "              jet id :       707968\n",
      "             jet kin :       438639\n",
      "two FatJets and jet kin :       343714\n",
      "     >= one oneTTbar :       343714\n",
      "          dPhi > 2.1 :       179192\n",
      "                sumw :            0\n",
      "               sumw2 :            0\n",
      "             At0bcen :          362\n",
      "             At0bfwd :          325\n",
      "             At1bcen :           20\n",
      "             At1bfwd :           16\n",
      "             At2bcen :            0\n",
      "             At2bfwd :            0\n",
      "             at0bcen :         8473\n",
      "             at0bfwd :         7505\n",
      "             at1bcen :          319\n",
      "             at1bfwd :          254\n",
      "             at2bcen :            4\n",
      "             at2bfwd :            5\n",
      "             0t0bcen :        83587\n",
      "             0t0bfwd :        76795\n",
      "             0t1bcen :         2126\n",
      "             0t1bfwd :         1759\n",
      "             0t2bcen :           18\n",
      "             0t2bfwd :           11\n",
      "             1t0bcen :         7512\n",
      "             1t0bfwd :         6551\n",
      "             1t1bcen :          276\n",
      "             1t1bfwd :          252\n",
      "             1t2bcen :            2\n",
      "             1t2bfwd :            5\n",
      "             2t0bcen :          149\n",
      "             2t0bfwd :          134\n",
      "             2t1bcen :            7\n",
      "             2t1bfwd :            8\n",
      "             2t2bcen :            0\n",
      "             2t2bfwd :            0\n"
     ]
    }
   ],
   "source": [
    "for name,output in outputs_weighted.items(): \n",
    "    print(\"-------weighted \" + name + \"--------\")\n",
    "    for i,j in output['cutflow'].items():        \n",
    "        print( '%20s : %12d' % (i,j) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
