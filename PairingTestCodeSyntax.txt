#    =============================================================================      
#   " TTTTTTT EEEEEEE   SSSSS TTTTTTT "    H     H IIIIIII   SSSSS TTTTTTT   SSSSS     
#        T    E        S         T         H     H    I     S         T     S          
#        T    E       S          T         H     H    I    S          T    S           
#        T    EEEEEEE  SSSSS     T         HHHHHHH    I     SSSSS     T     SSSSS      
#        T    E             S    T         H     H    I          S    T          S     
#        T    E            S     T         H     H    I         S     T         S      
#        T    EEEEEEE SSSSS      T         H     H IIIIIII SSSSS      T    SSSSS 
#    =============================================================================  
            
#             # ---- 4 Subjet's pt independant of category (testing purposes only) ---- #
#             'subjet01_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet02_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet11_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet12_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
            
#             # ---- Distance between subjet and Gen level quark ---- #
#             'subjet01_bquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet02_bquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet11_bquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet12_bquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
            
#             'subjet01_cquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet02_cquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet11_cquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet12_cquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
            
#             'subjet01_lightquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet02_lightquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet11_lightquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
#             'subjet12_lightquark_distance': hist.Hist("Counts", dataset_axis, distance_axis),
            
#             # pt of subjet defined with 'hadronFlavour' and subjet defined with nearest flavoured genpart #
#             'subjet01_bflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet01_with_bquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet02_bflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet02_with_bquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet11_bflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet11_with_bquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet12_bflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet12_with_bquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
            
#             'subjet01_cflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet01_with_cquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet02_cflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet02_with_cquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet11_cflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet11_with_cquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet12_cflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet12_with_cquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
            
#             'subjet01_lightflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet01_with_lightquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet02_lightflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet02_with_lightquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet11_lightflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet11_with_lightquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet12_lightflavor_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),
#             'subjet12_with_lightquark_pt': hist.Hist("Counts", dataset_axis, subjetpt_axis),






#    ===========================================================================================
#    PPPPPP     A    IIIIIII RRRRRR  IIIIIII N     N GGGGGGG     TTTTTTT EEEEEEE   SSSSS TTTTTTT 
#    P     P   A A      I    R     R    I    NN    N G              T    E        S         T    
#    P     P  A   A     I    R     R    I    N N   N G              T    E       S          T    
#    PPPPPP   AAAAA     I    RRRRRR     I    N  N  N G  GGGG        T    EEEEEEE  SSSSS     T    
#    P       A     A    I    R   R      I    N   N N G     G        T    E             S    T    
#    P       A     A    I    R    R     I    N    NN G     G        T    E            S     T    
#    P       A     A IIIIIII R     R IIIIIII N     N  GGGGG         T    EEEEEEE SSSSS      T  
#    ===========================================================================================

#         if 'JetHT' not in dataset: # If MC is used...
#         # ---- Subjets with Nearest b quarks ---- #
#             isGenPart_bquark = (np.abs(GenParts.pdgId) == 5)

#             # Start with SubJet01 #

#                             # 1.) Group the subjet with gen level bquark #
#             pairing_b01 = ak.cartesian([SubJet01.p4, GenParts.p4[isGenPart_bquark]]) 
#                             # 2.) Check if pair exists #
#             keepEvents_b01 = np.where(ak.count(pairing_b01.slot0.pt,-1) == 0, False, True) 
#                             # 3.) Only keep pairs if the event exists (avoid empty array elements) #
#             pairing_b01 = pairing_b01[keepEvents_b01] 
#                             # 4.) Distance between subjet and bquark #
#             deltaR_b01 = pairing_b01.slot0.delta_r(pairing_b01.slot1) 
#                             # 5.) Select (index of) smallest distance (also flattens deltaR_01) #
#             minimumR_indexb01 = ak.argmin(deltaR_b01, axis=-1) 
#                             # 6.) is nearest genpart within SubJet01 radius? #
#             deltaR_b01_new = deltaR_b01[np.arange(ak.size(deltaR_b01,0)),ak.to_numpy(minimumR_indexb01)]
#             isQuarkWithinRadiusb01 = deltaR_b01_new < 0.4 
#                             # 7.) Choose pairs with closest quark (min. index) that passes subjet radius cut (pass radius) #
#             SubJet01_and_nearby_bquark = pairing_b01.slot0[np.arange(ak.size(pairing_b01.slot0,0)),ak.to_numpy(minimumR_indexb01)]
#                             # Finally.) Used for Test Output #
#             SubJet01_with_bquark = SubJet01_and_nearby_bquark[isQuarkWithinRadiusb01] 
#             deltaR_b01_lessthanAK4 = deltaR_b01_new[isQuarkWithinRadiusb01]

#             # Repeat all 7 steps and select desired subjets with quarks for SubJets 02, 11, and 12 #
#             pairing_b02 = ak.cartesian([SubJet02.p4, GenParts.p4[isGenPart_bquark]]) 
#             keepEvents_b02 = np.where(ak.count(pairing_b02.slot0.pt,-1) == 0, False, True)
#             pairing_b02 = pairing_b02[keepEvents_b02]
#             deltaR_b02 = pairing_b02.slot0.delta_r(pairing_b02.slot1)
#             minimumR_indexb02 = ak.argmin(deltaR_b02, axis=-1) 
#             deltaR_b02_new = deltaR_b01[np.arange(ak.size(deltaR_b02,0)),ak.to_numpy(minimumR_indexb02)]
#             isQuarkWithinRadiusb02 = deltaR_b02_new < 0.4 
#             SubJet02_and_nearby_bquark = pairing_b02.slot0[np.arange(ak.size(pairing_b02.slot0,0)),ak.to_numpy(minimumR_indexb02)]
#             SubJet02_with_bquark = SubJet02_and_nearby_bquark[isQuarkWithinRadiusb02]
#             deltaR_b02_lessthanAK4 = deltaR_b02_new[isQuarkWithinRadiusb02]

#             pairing_b11 = ak.cartesian([SubJet11.p4, GenParts.p4[isGenPart_bquark]]) 
#             keepEvents_b11 = np.where(ak.count(pairing_b11.slot0.pt,-1) == 0, False, True)
#             pairing_b11 = pairing_b11[keepEvents_b11]
#             deltaR_b11 = pairing_b11.slot0.delta_r(pairing_b11.slot1)
#             minimumR_indexb11 = ak.argmin(deltaR_b11, axis=-1) 
#             deltaR_b11_new = deltaR_b01[np.arange(ak.size(deltaR_b11,0)),ak.to_numpy(minimumR_indexb11)]
#             isQuarkWithinRadiusb11 = deltaR_b11_new < 0.4 
#             SubJet11_and_nearby_bquark = pairing_b11.slot0[np.arange(ak.size(pairing_b11.slot0,0)),ak.to_numpy(minimumR_indexb11)]
#             SubJet11_with_bquark = SubJet11_and_nearby_bquark[isQuarkWithinRadiusb11]
#             deltaR_b11_lessthanAK4 = deltaR_b11_new[isQuarkWithinRadiusb11]

#             pairing_b12 = ak.cartesian([SubJet12.p4, GenParts.p4[isGenPart_bquark]]) 
#             keepEvents_b12 = np.where(ak.count(pairing_b12.slot0.pt,-1) == 0, False, True)
#             pairing_b12 = pairing_b12[keepEvents_b12]
#             deltaR_b12 = pairing_b12.slot0.delta_r(pairing_b12.slot1)
#             minimumR_indexb12 = ak.argmin(deltaR_b12, axis=-1) 
#             deltaR_b12_new = deltaR_b12[np.arange(ak.size(deltaR_b12,0)),ak.to_numpy(minimumR_indexb12)]
#             isQuarkWithinRadiusb12 = deltaR_b12_new < 0.4 
#             SubJet12_and_nearby_bquark = pairing_b12.slot0[np.arange(ak.size(pairing_b12.slot0,0)),ak.to_numpy(minimumR_indexb12)]
#             SubJet12_with_bquark = SubJet12_and_nearby_bquark[isQuarkWithinRadiusb12]
#             deltaR_b12_lessthanAK4 = deltaR_b12_new[isQuarkWithinRadiusb12]

#             """ ---------------------------------------------------------------------------------------------------------- """

#             # ---- Subjets with Nearest c quarks ---- #  ak.fill_none(array, 0)
#             isGenPart_cquark = (np.abs(GenParts.pdgId) == 4)

#             pairing_c01 = ak.cartesian([SubJet01.p4, GenParts.p4[isGenPart_cquark]]) 
#             keep_condition_one_c01 = (ak.count(pairing_c01.slot0.pt,-1) == 0)
#             keep_condition_two_c01 = (keepEvents_b01 == True) # If b quarks are also present in subjets...
#             keepEvents_c01 = np.where( np.logical_or(keep_condition_one_c01, keep_condition_two_c01) , False, True )
#             pairing_c01 = pairing_c01[keepEvents_c01]
#             deltaR_c01 = pairing_c01.slot0.delta_r(pairing_c01.slot1) 
#             minimumR_indexc01 = ak.argmin(deltaR_c01, axis=-1) 
#             deltaR_c01_new = deltaR_c01[np.arange(ak.size(deltaR_c01,0)),ak.to_numpy(minimumR_indexc01)]
#             isQuarkWithinRadiusc01 = deltaR_c01_new < 0.4 
#             SubJet01_and_nearby_cquark = pairing_c01.slot0[np.arange(ak.size(pairing_c01.slot0,0)),ak.to_numpy(minimumR_indexc01)]
#             SubJet01_with_cquark = SubJet01_and_nearby_cquark[isQuarkWithinRadiusc01] 
#             deltaR_c01_lessthanAK4 = deltaR_c01_new[isQuarkWithinRadiusc01]

#             pairing_c02 = ak.cartesian([SubJet02.p4, GenParts.p4[isGenPart_cquark]]) 
#             keep_condition_one_c02 = (ak.count(pairing_c02.slot0.pt,-1) == 0)
#             keep_condition_two_c02 = (keepEvents_b02 == True) # If b quarks are also present in subjets...
#             keepEvents_c02 = np.where( np.logical_or(keep_condition_one_c02, keep_condition_two_c02) , False, True )
#             pairing_c02 = pairing_c02[keepEvents_c02]
#             deltaR_c02 = pairing_c02.slot0.delta_r(pairing_c02.slot1)
#             minimumR_indexc02 = ak.argmin(deltaR_c02, axis=-1) 
#             deltaR_c02_new = deltaR_c02[np.arange(ak.size(deltaR_c02,0)),ak.to_numpy(minimumR_indexc02)]
#             isQuarkWithinRadiusc02 = deltaR_c02_new < 0.4 
#             SubJet02_and_nearby_cquark = pairing_c02.slot0[np.arange(ak.size(pairing_c02.slot0,0)),ak.to_numpy(minimumR_indexc02)]
#             SubJet02_with_cquark = SubJet02_and_nearby_cquark[isQuarkWithinRadiusc02]
#             deltaR_c02_lessthanAK4 = deltaR_c02_new[isQuarkWithinRadiusc02]

#             pairing_c11 = ak.cartesian([SubJet11.p4, GenParts.p4[isGenPart_cquark]]) 
#             keep_condition_one_c11 = (ak.count(pairing_c11.slot0.pt,-1) == 0)
#             keep_condition_two_c11 = (keepEvents_b11 == True) # If b quarks are also present in subjets...
#             keepEvents_c11 = np.where( np.logical_or(keep_condition_one_c11, keep_condition_two_c11) , False, True )
#             pairing_c11 = pairing_c11[keepEvents_c11]
#             deltaR_c11 = pairing_c11.slot0.delta_r(pairing_c11.slot1)
#             minimumR_indexc11 = ak.argmin(deltaR_c11, axis=-1)
#             deltaR_c11_new = deltaR_c11[np.arange(ak.size(deltaR_c11,0)),ak.to_numpy(minimumR_indexc11)]
#             isQuarkWithinRadiusc11 = deltaR_c11_new < 0.4 
#             SubJet11_and_nearby_cquark = pairing_c11.slot0[np.arange(ak.size(pairing_c11.slot0,0)),ak.to_numpy(minimumR_indexc11)]
#             SubJet11_with_cquark = SubJet11_and_nearby_cquark[isQuarkWithinRadiusc11]
#             deltaR_c11_lessthanAK4 = deltaR_c11_new[isQuarkWithinRadiusc11]

#             pairing_c12 = ak.cartesian([SubJet12.p4, GenParts.p4[isGenPart_cquark]]) 
#             keep_condition_one_c12 = (ak.count(pairing_c12.slot0.pt,-1) == 0)
#             keep_condition_two_c12 = (keepEvents_b12 == True) # If b quarks are also present in subjets...
#             keepEvents_c12 = np.where( np.logical_or(keep_condition_one_c12, keep_condition_two_c12) , False, True )
#             pairing_c12 = pairing_c12[keepEvents_c12]
#             deltaR_c12 = pairing_c12.slot0.delta_r(pairing_c12.slot1)
#             minimumR_indexc12 = ak.argmin(deltaR_c12, axis=-1) 
#             deltaR_c12_new = deltaR_c12[np.arange(ak.size(deltaR_c12,0)),ak.to_numpy(minimumR_indexc12)]
#             isQuarkWithinRadiusc12 = deltaR_c12_new < 0.4 
#             SubJet12_and_nearby_cquark = pairing_c12.slot0[np.arange(ak.size(pairing_c12.slot0,0)),ak.to_numpy(minimumR_indexc12)]
#             SubJet12_with_cquark = SubJet12_and_nearby_cquark[isQuarkWithinRadiusc12]
#             deltaR_c12_lessthanAK4 = deltaR_c12_new[isQuarkWithinRadiusc12]

#             """ ---------------------------------------------------------------------------------------------------------- """

#             # ---- Subjets with Nearest light quarks ---- #
#             isGenPart_1or2  = np.logical_or(np.abs(GenParts.pdgId) == 1, np.abs(GenParts.pdgId) == 2)
#             isGenPart_3or21 = np.logical_or(np.abs(GenParts.pdgId) == 3, np.abs(GenParts.pdgId) == 21)
#             isGenPart_lightquark = np.logical_or(isGenPart_1or2, isGenPart_3or21)

#             pairing_l01 = ak.cartesian([SubJet01.p4, GenParts.p4[isGenPart_lightquark]]) 
#             keep_condition_one_l01 = (ak.count(pairing_l01.slot0.pt,-1) == 0)
#             keep_condition_two_l01 = (keepEvents_b01 == True) # if b is found in subjet...
#             keep_condition_three_l01 = (keepEvents_c01 == True) # if c is found in subjet...
#             keep_condition_heavy_l01 = np.logical_or(keep_condition_two_l01, keep_condition_three_l01) # Is heavy quark in subjet
#             keepEvents_l01 = np.where( np.logical_or(keep_condition_one_l01, keep_condition_heavy_l01) , False, True )
#             pairing_l01 = pairing_l01[keepEvents_l01]
#             deltaR_l01 = pairing_l01.slot0.delta_r(pairing_l01.slot1) 
#             minimumR_indexl01 = ak.argmin(deltaR_l01, axis=-1) 
#             deltaR_l01_new = deltaR_l01[np.arange(ak.size(deltaR_l01,0)),ak.to_numpy(minimumR_indexl01)]
#             isQuarkWithinRadiusl01 = deltaR_l01_new < 0.4 
#             SubJet01_and_nearby_lquark = pairing_l01.slot0[np.arange(ak.size(pairing_l01.slot0,0)),ak.to_numpy(minimumR_indexl01)]
#             SubJet01_with_lquark = SubJet01_and_nearby_lquark[isQuarkWithinRadiusl01] 
#             deltaR_l01_lessthanAK4 = deltaR_l01_new[isQuarkWithinRadiusl01]

#             pairing_l02 = ak.cartesian([SubJet02.p4, GenParts.p4[isGenPart_lightquark]]) 
#             keep_condition_one_l02 = (ak.count(pairing_l02.slot0.pt,-1) == 0)
#             keep_condition_two_l02 = (keepEvents_b02 == True) 
#             keep_condition_three_l02 = (keepEvents_c02 == True) 
#             keep_condition_heavy_l02 = np.logical_or(keep_condition_two_l02, keep_condition_three_l02) 
#             keepEvents_l02 = np.where( np.logical_or(keep_condition_one_l02, keep_condition_heavy_l02) , False, True )
#             pairing_l02 = pairing_l02[keepEvents_l02]
#             deltaR_l02 = pairing_l02.slot0.delta_r(pairing_l02.slot1)
#             minimumR_indexl02 = ak.argmin(deltaR_l02, axis=-1) 
#             deltaR_l02_new = deltaR_l02[np.arange(ak.size(deltaR_l02,0)),ak.to_numpy(minimumR_indexl02)]
#             isQuarkWithinRadiusl02 = deltaR_l02_new < 0.4 
#             SubJet02_and_nearby_lquark = pairing_l02.slot0[np.arange(ak.size(pairing_l02.slot0,0)),ak.to_numpy(minimumR_indexl02)]
#             SubJet02_with_lquark = SubJet02_and_nearby_lquark[isQuarkWithinRadiusl02]
#             deltaR_l02_lessthanAK4 = deltaR_l02_new[isQuarkWithinRadiusl02]

#             pairing_l11 = ak.cartesian([SubJet11.p4, GenParts.p4[isGenPart_lightquark]]) 
#             keep_condition_one_l11 = (ak.count(pairing_l11.slot0.pt,-1) == 0)
#             keep_condition_two_l11 = (keepEvents_b11 == True) 
#             keep_condition_three_l11 = (keepEvents_c11 == True) 
#             keep_condition_heavy_l11 = np.logical_or(keep_condition_two_l11, keep_condition_three_l11) 
#             keepEvents_l11 = np.where( np.logical_or(keep_condition_one_l11, keep_condition_heavy_l11) , False, True )
#             pairing_l11 = pairing_l11[keepEvents_l11]
#             deltaR_l11 = pairing_l11.slot0.delta_r(pairing_l11.slot1)
#             minimumR_indexl11 = ak.argmin(deltaR_l11, axis=-1) 
#             deltaR_l11_new = deltaR_l11[np.arange(ak.size(deltaR_l11,0)),ak.to_numpy(minimumR_indexl11)]
#             isQuarkWithinRadiusl11 = deltaR_l11_new < 0.4 
#             SubJet11_and_nearby_lquark = pairing_l11.slot0[np.arange(ak.size(pairing_l11.slot0,0)),ak.to_numpy(minimumR_indexl11)]
#             SubJet11_with_lquark = SubJet11_and_nearby_lquark[isQuarkWithinRadiusl11]
#             deltaR_l11_lessthanAK4 = deltaR_l11_new[isQuarkWithinRadiusl11]

#             pairing_l12 = ak.cartesian([SubJet12.p4, GenParts.p4[isGenPart_lightquark]]) 
#             keep_condition_one_l12 = (ak.count(pairing_l12.slot0.pt,-1) == 0)
#             keep_condition_two_l12 = (keepEvents_b12 == True) 
#             keep_condition_three_l12 = (keepEvents_c12 == True) 
#             keep_condition_heavy_l12 = np.logical_or(keep_condition_two_l12, keep_condition_three_l12) 
#             keepEvents_l12 = np.where( np.logical_or(keep_condition_one_l12, keep_condition_heavy_l12) , False, True )
#             pairing_l12 = pairing_l12[keepEvents_l12]
#             deltaR_l12 = pairing_l12.slot0.delta_r(pairing_l12.slot1)
#             minimumR_indexl12 = ak.argmin(deltaR_l12, axis=-1) 
#             deltaR_l12_new = deltaR_l12[np.arange(ak.size(deltaR_l12,0)),ak.to_numpy(minimumR_indexl12)]
#             isQuarkWithinRadiusl12 = deltaR_l12_new < 0.4 
#             SubJet12_and_nearby_lquark = pairing_l12.slot0[np.arange(ak.size(pairing_l12.slot0,0)),ak.to_numpy(minimumR_indexl12)]
#             SubJet12_with_lquark = SubJet12_and_nearby_lquark[isQuarkWithinRadiusl12]
#             deltaR_l12_lessthanAK4 = deltaR_l12_new[isQuarkWithinRadiusl12]

#             # ---- Compare these plots as a test ---- # 
#             # ---- Flavors from s01 should agree well with genpart matching ---- #
#             # ---- B flavor from all 4 subjets should agree well with genpart matching ---- #

#             # Check the SubJets' SubJet_hadronFlavor #
#             isSubJet01_bflavor = (flav_s01 == 5)
#             isSubJet02_bflavor = (flav_s02 == 5)
#             isSubJet11_bflavor = (flav_s11 == 5)
#             isSubJet12_bflavor = (flav_s12 == 5)

#             isSubJet01_cflavor = (flav_s01 == 4)
#             isSubJet02_cflavor = (flav_s02 == 4)
#             isSubJet11_cflavor = (flav_s11 == 4)
#             isSubJet12_cflavor = (flav_s12 == 4)

#             isSubJet01_lightflavor = if_s01_isLightParton # Defined previously...
#             isSubJet02_lightflavor = if_s02_isLightParton # Defined previously...
#             isSubJet11_lightflavor = if_s11_isLightParton # Defined previously...
#             isSubJet12_lightflavor = if_s12_isLightParton # Defined previously...

#             # SubJets #
#             subjet01_pt = ak.flatten(SubJet01.p4.pt)
#             subjet02_pt = ak.flatten(SubJet02.p4.pt)
#             subjet11_pt = ak.flatten(SubJet11.p4.pt)
#             subjet12_pt = ak.flatten(SubJet12.p4.pt)

#             # SubJets that are given a SubJet_hadronFlavor #
#             subjet01_bflavor_pt = ak.flatten(SubJet01[isSubJet01_bflavor].p4.pt)
#             subjet02_bflavor_pt = ak.flatten(SubJet02[isSubJet02_bflavor].p4.pt)
#             subjet11_bflavor_pt = ak.flatten(SubJet11[isSubJet11_bflavor].p4.pt)
#             subjet12_bflavor_pt = ak.flatten(SubJet12[isSubJet12_bflavor].p4.pt)

#             subjet01_cflavor_pt = ak.flatten(SubJet01[isSubJet01_cflavor].p4.pt)
#             subjet02_cflavor_pt = ak.flatten(SubJet02[isSubJet02_cflavor].p4.pt)
#             subjet11_cflavor_pt = ak.flatten(SubJet11[isSubJet11_cflavor].p4.pt)
#             subjet12_cflavor_pt = ak.flatten(SubJet12[isSubJet12_cflavor].p4.pt)

#             subjet01_lightflavor_pt = ak.flatten(SubJet01[isSubJet01_lightflavor].p4.pt)
#             subjet02_lightflavor_pt = ak.flatten(SubJet02[isSubJet02_lightflavor].p4.pt)
#             subjet11_lightflavor_pt = ak.flatten(SubJet11[isSubJet11_lightflavor].p4.pt)
#             subjet12_lightflavor_pt = ak.flatten(SubJet12[isSubJet12_lightflavor].p4.pt)

#             # SubJets that are paired with a GenPart_pdgId #
#             subjet01_with_bquark_pt = SubJet01_with_bquark.pt
#             subjet02_with_bquark_pt = SubJet02_with_bquark.pt
#             subjet11_with_bquark_pt = SubJet11_with_bquark.pt
#             subjet12_with_bquark_pt = SubJet12_with_bquark.pt

#             subjet01_with_cquark_pt = SubJet01_with_cquark.pt
#             subjet02_with_cquark_pt = SubJet02_with_cquark.pt
#             subjet11_with_cquark_pt = SubJet11_with_cquark.pt
#             subjet12_with_cquark_pt = SubJet12_with_cquark.pt

#             subjet01_with_lightquark_pt = SubJet01_with_lquark.pt
#             subjet02_with_lightquark_pt = SubJet02_with_lquark.pt
#             subjet11_with_lightquark_pt = SubJet11_with_lquark.pt
#             subjet12_with_lightquark_pt = SubJet12_with_lquark.pt

#             # ******************************************************************************** #
#             # ------------------------------- Outputs for Test ------------------------------- #
#             # ******************************************************************************** #
#             output['subjet01_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet01_pt),
#                                       weight = ak.to_numpy(evtweights))
#             output['subjet02_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet02_pt),
#                                       weight = ak.to_numpy(evtweights))
#             output['subjet11_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet11_pt),
#                                       weight = ak.to_numpy(evtweights))
#             output['subjet12_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet12_pt),
#                                       weight = ak.to_numpy(evtweights))


#             output['subjet01_bflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet01_bflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet01_bflavor]))
#             output['subjet01_with_bquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet01_with_bquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusb01]))
#             output['subjet02_bflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet02_bflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet02_bflavor]))
#             output['subjet02_with_bquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet02_with_bquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusb02]))
#             output['subjet11_bflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet11_bflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet11_bflavor]))
#             output['subjet11_with_bquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet11_with_bquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusb11]))
#             output['subjet12_bflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet12_bflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet12_bflavor]))
#             output['subjet12_with_bquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet12_with_bquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusb12]))


#             output['subjet01_cflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet01_cflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet01_cflavor]))
#             output['subjet01_with_cquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet01_with_cquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusc01]))
#             output['subjet02_cflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet02_cflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet02_cflavor]))
#             output['subjet02_with_cquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet02_with_cquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusc02]))
#             output['subjet11_cflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet11_cflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet11_cflavor]))
#             output['subjet11_with_cquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet11_with_cquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusc11]))
#             output['subjet12_cflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet12_cflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet12_cflavor]))
#             output['subjet12_with_cquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet12_with_cquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusc12]))


#             output['subjet01_lightflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet01_lightflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet01_lightflavor]))
#             output['subjet01_with_lightquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet01_with_lightquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusl01]))
#             output['subjet02_lightflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet02_lightflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet02_lightflavor]))
#             output['subjet02_with_lightquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet02_with_lightquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusl02]))
#             output['subjet11_lightflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet11_lightflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet11_lightflavor]))
#             output['subjet11_with_lightquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet11_with_lightquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusl11]))
#             output['subjet12_lightflavor_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet12_lightflavor_pt),
#                                       weight = ak.to_numpy(evtweights[isSubJet12_lightflavor]))
#             output['subjet12_with_lightquark_pt'].fill(dataset = dataset,
#                                       subjetpt = ak.to_numpy(subjet12_with_lightquark_pt),
#                                       weight = ak.to_numpy(evtweights[isQuarkWithinRadiusl12]))


#             # ---- Delta R to nearest b quark and c quark, for subjets that are identified as “5” or “4". ---- #

#             output['subjet01_bquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_b01_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusb01]))
#             output['subjet02_bquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_b02_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusb02]))
#             output['subjet11_bquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_b11_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusb11]))
#             output['subjet12_bquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_b12_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusb12]))

#             output['subjet01_cquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_c01_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusc01]))
#             output['subjet02_cquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_c02_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusc02]))
#             output['subjet11_cquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_c11_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusc11]))
#             output['subjet12_cquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_c12_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusc12]))

#             output['subjet01_lightquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_l01_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusl01]))
#             output['subjet02_lightquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_l02_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusl02]))
#             output['subjet11_lightquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_l11_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusl11]))
#             output['subjet12_lightquark_distance'].fill(dataset = dataset,
#                                                    delta_r = ak.to_numpy(deltaR_l12_lessthanAK4),
#                                                    weight = ak.to_numpy(evtweights[isQuarkWithinRadiusl12]))